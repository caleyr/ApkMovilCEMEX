{"version":3,"file":"node_modules_cmx-web-components_core_dist_esm_cwc-breadcrumbs_entry_js.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+C;;;;;;;;;;;;;;;;;AC3CgC;AACa;;AAE5F;AACA;AACA,QAAQ,oDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAa;AACrB;AACA;AACA,gBAAgB,oDAAC,UAAU,0BAA0B,mBAAmB,oCAAoC,EAAE,oDAAC,UAAU,+CAA+C,EAAE,oDAAC;AAC3K;AACA,iBAAiB,OAAO,oDAAU;AAClC,yBAAyB,UAAU,mCAAmC,kCAAkC,MAAM,qBAAqB,iBAAiB,eAAe,UAAU,SAAS,wBAAwB,oBAAoB,aAAa,mBAAmB,eAAe,sBAAsB,mBAAmB,oBAAoB,iBAAiB;AAC/V;;AAE0C","sources":["./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js","./node_modules/@cmx-web-components/core/dist/esm/cwc-breadcrumbs.entry.js"],"sourcesContent":["function InitializeDirectionDetection(hostElement) {\r\n    // the function that sets the dir in the shadow dom\r\n    function executeDir(dir) {\r\n        const shadowKids = hostElement.shadowRoot.childNodes;\r\n        shadowKids.forEach(element => {\r\n            element.setAttribute('dir', dir);\r\n        });\r\n    }\r\n    function intervalHandler() {\r\n        const actualDir = hostElement.dataset.dir;\r\n        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');\r\n        if (dir !== actualDir) {\r\n            hostElement.dataset.dir = dir;\r\n            hostElement.shadowRoot && executeDir(dir);\r\n            if (dir === 'rtl') {\r\n                return hostElement.setAttribute('rtl', 'true');\r\n            }\r\n            return hostElement.removeAttribute('rtl');\r\n        }\r\n    }\r\n    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);\r\n}\r\nfunction DestroyDirectionDetection(hostElement) {\r\n    if (hostElement && hostElement['rtlInterval']) {\r\n        clearInterval(hostElement['rtlInterval']);\r\n    }\r\n}\n\nfunction setDesignVersion() {\r\n    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');\r\n    return frameworkVersion ? frameworkVersion : 'v1';\r\n}\n\nfunction initBasics(componentClass) {\r\n    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());\r\n    if (!componentClass.rtl) {\r\n        componentClass.host && InitializeDirectionDetection(componentClass.host);\r\n    }\r\n}\r\nfunction destroyBasics(componentClass) {\r\n    DestroyDirectionDetection(componentClass.host);\r\n}\n\nexport { destroyBasics as d, initBasics as i };\n","import { r as registerInstance, h, g as getElement } from './core-cf426fab.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\n\nconst Breadcrumbs = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.breadcrumbs = [];\n        /**\n         * The design version of the framework\n         */\n        this.designVersion = null;\n        /**\n         * Specifies whether component should render from right to left\n         */\n        this.rtl = false;\n        /**\n         * Specify the breadcrumb aria-label\n         */\n        this.ariaLabelNav = 'Breadcrumb';\n        /**\n         * Fetch the breadcrumbs list\n         */\n        this.fetchBreadcrumbs = () => {\n            this.breadcrumbs = Array.from(this.host.getElementsByTagName('cwc-breadcrumb'));\n        };\n        /**\n         * Set the aria-current attribute to the last element of the breadcrumbs list\n         */\n        this.setAriaCurrent = () => {\n            const lastElem = this.breadcrumbs[this.breadcrumbs.length - 1];\n            lastElem && lastElem.setAttribute('aria-current', 'page');\n        };\n        /**\n         * Register listener on event when breadcrumbs are changed\n         */\n        this.registerSlotChangeHandler = () => {\n            const breadcrumbsSlot = this.host.shadowRoot.querySelector('slot');\n            breadcrumbsSlot.addEventListener('slotchange', this.handleSlotChange);\n        };\n        /**\n         * In case of Slot change, refresh the breadcrumbs list\n         */\n        this.handleSlotChange = () => {\n            this.fetchBreadcrumbs();\n        };\n    }\n    componentWillLoad() {\n        initBasics(this);\n    }\n    componentDidLoad() {\n        this.fetchBreadcrumbs();\n        this.setAriaCurrent();\n        this.registerSlotChangeHandler();\n    }\n    disconnectedCallback() {\n        destroyBasics(this);\n    }\n    render() {\n        return (h(\"nav\", { class: `cwc-breadcrumbs ${this.designVersion}`, \"aria-label\": this.ariaLabelNav }, h(\"div\", { role: \"list\", class: \"cwc-breadcrumbs__items\" }, h(\"slot\", null))));\n    }\n    get host() { return getElement(this); }\n    static get style() { return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:inline-block}.cwc-breadcrumbs{font-size:1rem;padding:0;margin:0}.cwc-breadcrumbs__items{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}.v2.cwc-breadcrumbs{font-size:.75rem}\"; }\n};\n\nexport { Breadcrumbs as cwc_breadcrumbs };\n"],"names":[],"sourceRoot":"webpack:///"}