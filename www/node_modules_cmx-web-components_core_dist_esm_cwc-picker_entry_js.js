"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_cmx-web-components_core_dist_esm_cwc-picker_entry_js"],{

/***/ 27345:
/*!********************************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ destroyBasics),
/* harmony export */   "i": () => (/* binding */ initBasics)
/* harmony export */ });
function InitializeDirectionDetection(hostElement) {
    // the function that sets the dir in the shadow dom
    function executeDir(dir) {
        const shadowKids = hostElement.shadowRoot.childNodes;
        shadowKids.forEach(element => {
            element.setAttribute('dir', dir);
        });
    }
    function intervalHandler() {
        const actualDir = hostElement.dataset.dir;
        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');
        if (dir !== actualDir) {
            hostElement.dataset.dir = dir;
            hostElement.shadowRoot && executeDir(dir);
            if (dir === 'rtl') {
                return hostElement.setAttribute('rtl', 'true');
            }
            return hostElement.removeAttribute('rtl');
        }
    }
    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);
}
function DestroyDirectionDetection(hostElement) {
    if (hostElement && hostElement['rtlInterval']) {
        clearInterval(hostElement['rtlInterval']);
    }
}

function setDesignVersion() {
    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');
    return frameworkVersion ? frameworkVersion : 'v1';
}

function initBasics(componentClass) {
    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());
    if (!componentClass.rtl) {
        componentClass.host && InitializeDirectionDetection(componentClass.host);
    }
}
function destroyBasics(componentClass) {
    DestroyDirectionDetection(componentClass.host);
}




/***/ }),

/***/ 95416:
/*!****************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/cwc-picker.entry.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cwc_picker": () => (/* binding */ PickerInput)
/* harmony export */ });
/* harmony import */ var _core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-cf426fab.js */ 98545);
/* harmony import */ var _commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonComponentFeatures-b771e888.js */ 27345);
/* harmony import */ var _helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-bb43a8d9.js */ 94326);




const RESPONSIVE_BREAKPOINT_AS_MAX = 768;
const PickerInput = class {
    constructor(hostRef) {
        (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.hidden = true;
        this.orientation = 'nn';
        this.layerStyle = {};
        this.valueLabel = '';
        this.pickerId = null;
        this.highlightedOption = null;
        this.isFocused = false;
        this.changeByAction = false;
        this.fromControlValue = false;
        this.overlayCss = `
  .cwc-picker__overlay {
    display: block;
    position: fixed;
    z-index: 999;
    background-image: linear-gradient(180deg, #3FA9F5 0%, #3FA9F5 3px, #FFF 3px, #FFF 100%);
    border-radius: 3px;
    -webkit-box-shadow: 0 8px 13px rgba(0, 0, 0, 0.3);
    box-shadow: 0 8px 13px rgba(0, 0, 0, 0.3);
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
    flex-direction: column;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    overflow: hidden;
    opacity: 1;
    max-height: 300px;
    max-width: 80vw;
    padding-top: 3px;
    transition: opacity 300ms ease, transform 250ms ease;
  }
  .cwc-picker__overlay.cwc-picker--hidden {
    opacity: 0;
    pointer-events: none;
  }
  .cwc-picker__overlay.pp, .cwc-picker__overlay.np {
    -ms-flex-item-align: end;
    align-self: flex-end;
    -webkit-box-shadow: 0 -8px 13px rgba(0, 0, 0, 0.3);
    box-shadow: 0 -8px 13px rgba(0, 0, 0, 0.3);
    background-image: linear-gradient(0deg, #3FA9F5 0%, #3FA9F5 3px, #FFF 3px, #FFF 100%);
    padding-bottom: 3px; // set in pixels cause of the line width;
    padding-top: 0px;
  }
  [dir="ltr"] .cwc-picker__overlay-header::before{
    margin-left: 1.5em;
  }
  [dir="rtl"] .cwc-picker__overlay-header::before{
    margin-right: 1.5em;
  }
  .cwc-picker__overlay-header::before {
    content: "\\E929";
    font-family: "dls-icons";
    position: absolute;
    line-height: 1.5rem;
    font-size: 1rem;
    top: 0.5rem;
    color: #3FA9F5;
    pointer-events: none;
    -webkit-margin-start: 1.5em;
            margin-inline-start: 1.5em;
    margin-top: 2px;
  }
  .cwc-picker__overlay-footer {
    padding: 0.75rem 0;
    border-top: 1px solid #ADAEBB;
    margin: 0 1rem;
    display: -ms-flexbox;
    display: flex;
  }
  .cwc-picker__overlay-footer--justify-start {
    -ms-flex-pack: start;
    justify-content: flex-start;
  }
  .cwc-picker__overlay-footer--justify-end {
    -ms-flex-pack: end;
    justify-content: flex-end;
  }
  .cwc-picker__overlay-filter {
    margin: 0 1rem;
    padding: 0;
    padding-inline-start: 2rem;
    font-family: "Roboto", sans-serif;
    border: none;
    border-bottom: 1px solid #ADAEBB;
    width: calc(100% - 2rem);
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    font-size: 1rem;
    height: 2.5rem;
    outline: none;
  }
  .cwc-picker__options-scroller {
    -ms-flex: 1 1 auto;
    flex: 1 1 auto;
    overflow-y: auto;
  }

  .cwc-picker__options-scroller--empty::before{
    content:attr(data-empty-message);
    display:block;
    padding: 0.75rem 1rem;
    color:#666;
  }
  .cwc-picker__option {
    padding: 0.625rem 2rem;
    cursor: pointer;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-align: center;
    align-items: center;
    position: relative;
  }
  .cwc-picker__option--highlighted {
    background-color: #F4F6F9;
  }
  .cwc-picker__option[data-selected=true]::before {
    content: "\\e93c";
    font-family: 'dls-icons' !important;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    position: absolute;
    margin-inline-start: -1.375rem;
    color: #3FA9F5;
  }

  .cwc-picker__option--filtered {
    display:none;
  }

  .cwc-picker--multiple .cwc-picker__option[data-selected=false]::before {
    content: "\\e911";
    font-family: 'dls-icons' !important;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    position: absolute;
    margin-inline-start: -1.375rem;
    color: #ADAEBB;
  }

  .cwc-picker--multiple .cwc-picker__option[data-selected=true]::before {
    content: "\\e910";
  }

  .cwc-picker--multiple .cwc-picker__option {
    padding: 0.625rem 3.125rem;
  }

  @media (max-width: 767px) {
    .cwc-picker__overlay {
      top: 0 !important;
      left: 0 !important;
      width: 100% !important;
      height: 100vh !important;
      max-height: 100vh !important;
      max-width: 100vw !important;
      -ms-flex-align: center;
      align-items: center;
      -ms-flex-pack: center;
      justify-content: center;
      background-color: rgba(0, 27, 58, 0.8);
      pointer-events: none !important;
      min-width: 0 !important;
    }
    .cwc-picker__overlay.cwc-picker--visible{
      pointer-events: all !important;
    }
    .cwc-picker__overlay.nn, .cwc-picker__overlay.pn, .cwc-picker__overlay.pp, .cwc-picker__overlay.np {
      background-image: none;
    }
    .cwc-picker__options-scroller,
    .cwc-picker__overlay-header{
      background-color: #fff;
      max-height: calc(100vh - 64px);
      width: calc(100vw - 64px);
      display: block;
      flex: 0 0 auto;
      border-top: 3px solid #3FA9F5;
      position:relative;
    }
    .cwc-picker__overlay-header + .cwc-picker__options-scroller {
      border-top: none;
    }
    .cwc-picker__overlay-footer{
      width: calc(100vw - 64px);
      background-color: #fff;
      padding: 0.75rem;
      box-sizing: border-box;
    }
  }
  `;
        /**
         * The design version of the framework
         */
        this.designVersion = null;
        /** Forces the overlay to open in a certain direction. Possible values are "ne", "se", "sw" and "nw" */
        this.direction = null;
        /** disables the overlay funcitonality */
        this.disabled = false;
        /** Defines max height in px of the select dropdown */
        this.dropdownMaxHeight = null;
        /** When set to true, dropdown will show an options filtering input */
        this.filter = false;
        /** Placeholder for options filter input */
        this.filterPlaceholder = 'Filter Options';
        /** Placeholder for options filter input */
        this.filterEmptyMessage = 'No options match your query';
        /** A CTA Button element in the footer of the select */
        this.footerCta = false;
        /** The Variant of the CTA Butoon */
        this.footerCtaVariant = 'link';
        /** The position of the CTA Button Icon */
        this.footerCtaIconPosition = 'leading';
        /** The position of the CTA Button Icon */
        this.footerCtaJustify = 'start';
        /** Input label */
        this.label = null;
        /** When set to true, loader will appear inside the select */
        this.loading = false;
        /** Defines if the options will be multiple (with checkbox) */
        this.multiple = false;
        /** Special implementation of mobile input (material design like) */
        this.mobile = false;
        /** disables overlay toggling on target element click */
        this.noToggle = false;
        /** When set to true the element is required and the label is decorated with an asterisk (*) */
        this.required = false;
        /** Specify whether component should render from right to left */
        this.rtl = false;
        /** Defines whether on multiple option should show option "Select All" */
        this.selectAll = false;
        /** Label for Select All option */
        this.selectAllLabel = 'Select All';
        /** Shows and hides the overlay */
        this.show = false;
        /** Status of the form field. */
        this.status = 'regular';
        /**
         * Defines if values should be treated as strings or objects. If set to true, The output value will be the option string value instead of the { name, value } object.
         */
        this.stringValues = false;
        /** Defines if the select has got to be rendered with out supporting chrome. */
        this.unwrap = false;
        /**
         * Provides a means to read and replace the selections for this component. Value type is { name: string; value: string | number; } | string | number
         */
        this.value = null;
        /** This controls the private inner working of value getting setting */
        this.controlValue = null;
        /** Specify the variant of the picker */
        this.variant = 'regular';
        this.selectHighlighted = e => {
            const clickValue = this.highlightedOption.dataset.value;
            const pickedSelection = this.host.querySelector('option[value="' + clickValue + '"]');
            // let's set this flag so the change doesn't occur twice
            this.changeByAction = true;
            // on single selection check if i selected the same value
            if (!this.multiple) {
                const currentSelection = this.host.querySelector('option[selected]');
                // set actual option as selected
                if (currentSelection !== pickedSelection) {
                    if (currentSelection) {
                        currentSelection.removeAttribute('selected');
                    }
                    pickedSelection.setAttribute('selected', 'selected');
                }
                this.controlValue = {
                    value: this.highlightedOption.dataset.value,
                    name: this.highlightedOption.dataset.name,
                };
            }
            else {
                const options = this.host.querySelectorAll('option');
                let currentSelections = Array.from(this.host.querySelectorAll('option[selected]'));
                const valueArray = [];
                // check if this is our select all option
                if (clickValue === 'cwc-picker-select-all-option') {
                    if (options.length === currentSelections.length) {
                        // deselect all
                        options.forEach(option => {
                            option.removeAttribute('selected');
                        });
                        // selectButton.setAttribute('data-selected', 'false');
                    }
                    else {
                        // select all
                        options.forEach(option => {
                            option.setAttribute('selected', 'selected');
                            const valueObject = {
                                value: option.value,
                                name: option.innerText,
                            };
                            valueArray.push(valueObject);
                        });
                        // selectButton.setAttribute('data-selected', 'true');
                    }
                }
                else {
                    // on multiple selection check if what i clicked is not selected and select/deselect accordingly
                    if (pickedSelection.getAttribute('selected') === 'selected') {
                        // deselect
                        pickedSelection.removeAttribute('selected');
                        currentSelections = currentSelections.filter(selection => {
                            return selection !== pickedSelection;
                        });
                    }
                    else {
                        // select
                        pickedSelection.setAttribute('selected', 'selected');
                        if (currentSelections.indexOf(pickedSelection) === -1) {
                            currentSelections.push(pickedSelection);
                        }
                    }
                    currentSelections.forEach((selection) => {
                        const valueObject = {
                            value: selection.value,
                            name: selection.innerText,
                        };
                        valueArray.push(valueObject);
                    });
                }
                this.controlValue = valueArray;
                // check/uncheck select all if present and needed
                if (this.layer && this.selectAll) {
                    const selectButton = this.layer.querySelector('div[data-value=cwc-picker-select-all-option]');
                    selectButton.setAttribute('data-selected', options.length === valueArray.length ? 'true' : 'false');
                }
            }
            this.changeInputText();
            if (!e.silent) {
                this.emitNewValue();
                if (!this.multiple && !this.noToggle) {
                    this.hideOverlay({ target: this.targetElement });
                }
                this.targetElement.focus();
            }
        };
        this.handleKeystrokes = e => {
            e.preventDefault();
            // get the pressed key
            const key = e.code;
            // we let tab get used normally to advance back and forth in the tabindex
            if (key !== 'Tab') {
                // if not tab, let's prevent default behavior to act upon the keystroke
                // get the adequate funciton for each keystroke
                const keyFn = this.getKeystrokeFunction(key);
                // if there's a function
                if (keyFn) {
                    // execute
                    keyFn(e);
                } // add support for filtering keydown implementation here on else
            }
        };
        this.handleBlur = () => {
            this.isFocused = false;
            this.cwcBlur.emit();
            this.targetElement.classList.remove('cwc-picker__input--active');
            const label = this.targetElement.previousSibling;
            if (label) {
                label.classList.remove('cwc-picker__label--active');
            }
            document.removeEventListener('focusin', this.hasBlured);
            document.removeEventListener('keydown', this.handleKeystrokes);
            document.removeEventListener('click', this.hasBlured);
        };
        // let's emulate the select's behavior of blur when clicking outside of it.
        this.hasBlured = e => {
            const clickedOnElement = e.target === this.host;
            const clickedWithinLayer = this.layer.contains(e.target);
            if (!clickedOnElement && !clickedWithinLayer) {
                this.handleBlur();
            }
        };
        this.onFocus = (ev) => {
            ev.preventDefault();
            ev.stopPropagation();
            if (!this.isFocused) {
                this.targetElement.classList.add('cwc-picker__input--active');
                const label = this.targetElement.previousSibling;
                if (label) {
                    label.classList.add('cwc-picker__label--active');
                }
                this.isFocused = true;
                this.cwcFocus.emit();
                setTimeout(() => {
                    document.addEventListener('click', this.hasBlured);
                    document.addEventListener('keydown', this.handleKeystrokes);
                    document.addEventListener('focusin', this.hasBlured);
                }, 0);
            }
        };
        this.setOrientation = orientation => {
            this.orientation = orientation;
            this.layer.classList.remove('nn');
            this.layer.classList.remove('np');
            this.layer.classList.remove('pp');
            this.layer.classList.remove('pn');
            this.layer.classList.add(orientation);
        };
        this.setLayerStyle = layerStyles => {
            const fullStyle = Object.assign({}, layerStyles);
            Object.keys(fullStyle).forEach(style => {
                this.layer.style[style] = fullStyle[style];
            });
        };
        this.positionOverlay = () => {
            // find position on screen
            const elementDimensions = this.targetElement.getBoundingClientRect();
            if (this.layer) {
                // get overlay dimensions
                const layerDimensions = this.layer.getBoundingClientRect();
                // get window width and height
                const windowDimensions = {
                    width: document.documentElement.clientWidth,
                    height: document.documentElement.clientHeight,
                };
                // define base overlay style
                const layerStyle = {
                    left: '',
                    top: '',
                    minWidth: elementDimensions.width + 'px',
                };
                let caseString;
                let flow;
                let lateralOverflow;
                let verticalOverflow;
                if (this.direction) {
                    flow = 'ltr';
                    const directionArray = this.direction.split('');
                    caseString = (directionArray[1] === 'w' ? 'p' : 'n') + (directionArray[0] === 'n' ? 'p' : 'n');
                }
                else {
                    if (!this.rtl) {
                        // calculate if overflows
                        lateralOverflow = elementDimensions.left + layerDimensions.width - windowDimensions.width;
                        verticalOverflow = elementDimensions.top + layerDimensions.height - windowDimensions.height;
                        // define the overflow scenario for a particular class and the positioning switch
                        caseString = (lateralOverflow > 0 ? 'p' : 'n') + (verticalOverflow > 0 ? 'p' : 'n');
                        flow = 'ltr';
                    }
                    else {
                        // calculate if overflows
                        const endOverflow = elementDimensions.right - layerDimensions.width;
                        const startOverflow = elementDimensions.left + layerDimensions.width - windowDimensions.width;
                        verticalOverflow = elementDimensions.top + layerDimensions.height - windowDimensions.height;
                        const sideOverflow = endOverflow < 0 && startOverflow < 0;
                        // define the overflow scenario for a particular class and the positioning switch
                        caseString = (sideOverflow ? 'p' : 'n') + (verticalOverflow > 0 ? 'p' : 'n');
                        flow = 'rtl';
                    }
                }
                // get the top left values with the orientation string
                const topleft = this.getOrientation(`${flow}_${caseString}`, elementDimensions, layerDimensions);
                // assign the new layer style
                const fullStyle = Object.assign(Object.assign({}, layerStyle), topleft);
                this.setLayerStyle(fullStyle);
                // assign the orientation for custom orientation classes
                this.setOrientation(caseString);
            }
        };
        // this funciton shows the overlay
        this.showOverlay = () => {
            this.targetElement.classList.add('open');
            setTimeout(() => {
                document.addEventListener('scroll', this.hideOverlay, true);
                document.addEventListener('cwcScroll', this.hideOverlay, true);
                window.addEventListener('resize', this.hideOverlay);
                if (!this.noToggle) {
                    document.addEventListener('click', this.hideOverlay);
                }
            });
            this.positionOverlay();
            this.layerStyle = Object.assign({}, this.layerStyle);
            this.hidden = false;
            this.layer.classList.remove('cwc-picker--hidden');
            this.layer.classList.add('cwc-picker--visible');
            this.showEvent.emit(true);
        };
        // this function hides the overlay
        this.hideOverlay = e => {
            this.targetElement.classList.remove('open');
            const target = e.target;
            const iw = this.layer.contains(target);
            const hideFn = () => {
                document.removeEventListener('scroll', this.hideOverlay, true);
                document.removeEventListener('cwcScroll', this.hideOverlay, true);
                window.removeEventListener('resize', this.hideOverlay);
                if (!this.noToggle) {
                    document.removeEventListener('click', this.hideOverlay);
                }
                this.layerStyle = Object.assign({}, this.layerStyle);
                this.hidden = true;
                this.layer.classList.remove('cwc-picker--visible');
                this.layer.classList.add('cwc-picker--hidden');
                this.showEvent.emit(false);
            };
            if (!iw) {
                hideFn();
            }
            else {
                // let's verify if it's mobile and the backdrop has been clicked
                const winWidth = window.innerWidth;
                if (winWidth < RESPONSIVE_BREAKPOINT_AS_MAX && e.target === this.layer) {
                    hideFn();
                }
            }
        };
        // this function toggles the overlay state
        this.toggleOverlay = e => {
            if (!this.disabled && !this.noToggle) {
                if (this.hidden) {
                    return this.showOverlay();
                }
                return this.hideOverlay(e);
            }
        };
        this.highlightOptionByEvent = (e) => {
            const highlightedOption = this.layer.querySelector('.cwc-picker__option--highlighted');
            if (highlightedOption) {
                highlightedOption.classList.remove('cwc-picker__option--highlighted');
            }
            const target = e.target;
            target.classList.add('cwc-picker__option--highlighted');
            this.highlightedOption = target;
        };
        this.filterOptions = (fString) => {
            this.emitFilterValue(fString);
            const layerOptions = this.layer.querySelectorAll('.cwc-picker__option');
            let optionAvailable = false;
            layerOptions.forEach((option) => {
                const optionLabel = option.dataset.name.toLowerCase();
                const filter = fString.toLowerCase();
                const match = optionLabel.indexOf(filter) > -1 ? true : false;
                // determine if there's a match to show empty message or not
                if (!optionAvailable && match) {
                    optionAvailable = true;
                }
                if (fString) {
                    // add or remove filter class
                    option.classList[match ? 'remove' : 'add']('cwc-picker__option--filtered');
                }
                else {
                    option.classList.remove('cwc-picker__option--filtered');
                }
            });
            // let's see if there's an option available and tell the user if not
            const optionScroller = this.layer.querySelector('.cwc-picker__options-scroller');
            if (!optionAvailable) {
                optionScroller.classList.add('cwc-picker__options-scroller--empty');
            }
            else {
                optionScroller.classList.remove('cwc-picker__options-scroller--empty');
            }
        };
        this.createSelectAllCta = () => {
            const modelOption = document.createElement('option');
            modelOption.setAttribute('value', 'cwc-picker-select-all-option');
            modelOption.innerText = this.selectAllLabel;
            const selectAllCta = this.createOption(modelOption);
            return selectAllCta;
        };
        this.removeSelectionByValue = optionValue => {
            if (this.multiple) {
                const newValue = [].concat(this.controlValue);
                this.controlValue = newValue.filter(selection => {
                    return selection.value !== optionValue;
                });
            }
            else {
                this.controlValue = null;
            }
            this.changeInputText();
        };
        this.mutationHandler = mutations => {
            mutations.forEach(mutation => {
                if (mutation.type === 'childList') {
                    // get added nodes
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === 1 && node.nodeName === 'OPTION') {
                            const option = this.createOption(node);
                            this.optionsScroller.appendChild(option);
                        }
                    });
                    // get removals
                    mutation.removedNodes.forEach(node => {
                        if (node.nodeType === 1 && node.nodeName === 'OPTION') {
                            const optionValue = node.getAttribute('value');
                            this.removeOptionByValue(optionValue);
                        }
                    });
                }
                // change attribute of the option
                if (mutation.type === 'attributes') {
                    const attributeName = mutation.attributeName;
                    const oldValue = mutation.oldValue;
                    const newValue = mutation.target.getAttribute(attributeName);
                    const optionValue = attributeName === 'value' ? oldValue : mutation.target.getAttribute('value');
                    this.changeOptionAttributeByValue(optionValue, attributeName, oldValue, newValue);
                }
                // change text within an option
                if (mutation.type === 'characterData') {
                    const option = mutation.target.parentNode;
                    const optionValue = option.getAttribute('value');
                    this.changeOptionTextByValue(optionValue, mutation.target.textContent);
                }
            });
        };
        this.cwcBlur = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcBlur", 7);
        this.cwcChange = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcChange", 7);
        this.cwcFilter = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcFilter", 7);
        this.cwcPickerCtaClick = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcPickerCtaClick", 7);
        this.cwcFocus = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcFocus", 7);
        this.showEvent = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcShow", 7);
    }
    updateMultiple(newValue, oldValue) {
        if (newValue !== oldValue) {
            if (newValue === true) {
                // convert single to multiple
                if (this.controlValue) {
                    const zeValue = [];
                    zeValue.push(this.controlValue);
                    this.controlValue = zeValue;
                }
            }
            else {
                // convert multiple to single
                if (Array.of(this.controlValue).length > 0) {
                    this.controlValue = this.controlValue[0];
                }
                const selectedOptions = this.host.querySelectorAll('option[selected]');
                if (selectedOptions.length > 1) {
                    for (let i = 1; i < selectedOptions.length; i++) {
                        selectedOptions[i].removeAttribute('selected');
                    }
                }
            }
            // reinitialize layer
            this.componentDidUnload();
            this.componentDidLoad();
            // emit new value as it changed for sure
            this.emitNewValue();
        }
    }
    updateDir(isRtl) {
        this.layer.setAttribute('dir', isRtl ? 'rtl' : 'ltr');
        this.positionOverlay();
    }
    handleShow(newValue, oldValue) {
        if (newValue !== oldValue) {
            if (this.show) {
                this.showOverlay();
            }
            else {
                this.hideOverlay({
                    target: this.targetElement,
                    composedPath() {
                        return false;
                    },
                });
            }
        }
    }
    updateStringValues() {
        this.updateValueFromControlValue();
    }
    handleValue(newValue) {
        if (!this.fromControlValue) {
            if (this.isCwcPickerOption(newValue)) {
                // should be a CwcPickerOption
                this.controlValue = newValue;
            }
            else {
                // can be CwcPickerOptions, string, number, or array of either
                if (Array.isArray(newValue)) {
                    // either CwcPickerOptions or an array of string|number
                    if (newValue.length > 0) {
                        if (this.isCwcPickerOptions(newValue)) {
                            // array of CwcPickerOption
                            this.controlValue = newValue;
                        }
                        else {
                            // array of string|number
                            const theArray = [];
                            newValue.forEach((value) => {
                                const layerOption = this.layer.querySelector('[data-value="' + value + '"]');
                                if (layerOption) {
                                    theArray.push({ value, name: layerOption.innerText });
                                }
                            });
                            this.controlValue = theArray;
                        }
                    }
                }
                else {
                    // should be string|number
                    // get the option element (if exists)
                    const layerOption = this.layer.querySelector('[data-value="' + newValue + '"]');
                    if (layerOption) {
                        this.controlValue = { value: newValue, name: layerOption.innerText };
                    }
                }
            }
        }
        this.fromControlValue = false;
    }
    setValueByProp(newValue, oldValue) {
        // WE USE THIS METHOD ONLY FOR WHEN THE VALUE HAS BEEN SET PROGRAMATICALLY FROM OUTSIDE THE COMPONENT
        // BY CHANGING THE VALUE PROPERTY
        // THE REGULAR METHOD TO SET VALUE BY CLICKING OPTIONS IS IN THE METHOD "selectHighlighted"
        if (this.changeByAction) {
            this.changeByAction = false;
            this.updateValueFromControlValue();
            return;
        }
        const areEqualShallow = (a, b) => {
            try {
                for (const key in a) {
                    if (!(key in b) || a[key] !== b[key]) {
                        return false;
                    }
                }
                for (const key in b) {
                    if (!(key in a) || a[key] !== b[key]) {
                        return false;
                    }
                }
                return true;
            }
            catch (error) {
                return false;
            }
        };
        let valuesEqual = false;
        if (!this.multiple) {
            valuesEqual = areEqualShallow(newValue, oldValue);
        }
        if (!valuesEqual) {
            // if the new value is null then deselect everything
            if (!newValue) {
                // deselect everything
                this.deselectEveryting();
                this.emitNewValue();
                return;
            }
            // a funciton to check the validity of a value set programatically
            const valueIsValid = dataValue => {
                // get the option element (if exists)
                const layerOption = this.layer.querySelector('[data-value="' + dataValue + '"]');
                if (layerOption) {
                    return layerOption;
                }
                return false;
            };
            // a funciton to highlight and select a value
            const highlightAndSelect = layerOption => {
                if (layerOption) {
                    this.highlightedOption = layerOption;
                    this.selectHighlighted({ silent: true });
                }
            };
            if (this.multiple) {
                // check if it is an array
                if (Array.isArray(newValue)) {
                    const defNewValueArray = [];
                    newValue.forEach(option => {
                        if (option.name && option.value) {
                            // lets see if the option is valid and get the layer element
                            const valueAcceptedOption = valueIsValid(option.value);
                            if (!valueAcceptedOption) {
                                throw new Error('option with value ' + option.value + 'is not part of the picker options');
                            }
                            else {
                                // it is valid, so let's push it to an array
                                defNewValueArray.push(valueAcceptedOption);
                            }
                        }
                    });
                    // since it is programatically, deselect everything
                    this.deselectEveryting();
                    // go through the array and select the options programatically
                    defNewValueArray.forEach(option => {
                        highlightAndSelect(option);
                    });
                }
            }
            else {
                if (newValue.name && newValue.value) {
                    // lets see if the option is valid and get the layer element
                    const valueAcceptedOption = valueIsValid(newValue.value);
                    if (!valueAcceptedOption) {
                        this.controlValue = oldValue;
                        throw new Error('value is not part of the picker options');
                    }
                    else {
                        // if it's valid then select the option programatically
                        highlightAndSelect(valueAcceptedOption);
                    }
                }
            }
            // emit the new value;
            this.emitNewValue();
        }
        this.updateValueFromControlValue();
    }
    updateValueFromControlValue() {
        const value = this.controlValue;
        this.fromControlValue = true;
        this.value = this.stringValues
            ? Array.isArray(value)
                ? value.map((item) => item.value)
                : value.value
            : value;
    }
    isCwcPickerOption(value) {
        return typeof value === 'object' && value.name && value.value;
    }
    isCwcPickerOptions(value) {
        return (Array.isArray(value) &&
            value.length > 0 &&
            value.every(option => {
                return this.isCwcPickerOption(option);
            }));
    }
    deselectEveryting() {
        const currentSelections = this.host.querySelectorAll('option[selected]');
        currentSelections.forEach(option => {
            option.removeAttribute('selected');
        });
        this.changeInputText();
    }
    navigateList(downWards = true) {
        // get highlighted element
        const highlightedOption = this.layer.querySelector('.cwc-picker__option.cwc-picker__option--highlighted');
        let nextItem = null;
        if (highlightedOption) {
            // determine if it's the first or last
            const possibleNextItem = downWards
                ? highlightedOption.nextElementSibling
                : highlightedOption.previousElementSibling;
            nextItem = possibleNextItem ? possibleNextItem : highlightedOption;
            highlightedOption.classList.remove('cwc-picker__option--highlighted');
        }
        else {
            nextItem = this.layer.querySelector('.cwc-picker__option');
        }
        nextItem.classList.add('cwc-picker__option--highlighted');
        // we scroll the option into view if it's not.
        nextItem.scrollIntoView(false);
        this.highlightedOption = nextItem;
    }
    emitNewValue() {
        this.cwcChange.emit(this.value);
    }
    emitFilterValue(filterValue) {
        this.cwcFilter.emit(filterValue);
    }
    changeInputText() {
        let valueLabel = '';
        if (Array.isArray(this.controlValue)) {
            // multiple values
            this.controlValue.forEach((item, i) => {
                const cvLength = this.controlValue['length'];
                console.log(i, this.controlValue, cvLength);
                const isNotLastElement = i < cvLength - 1;
                valueLabel += item.name + (isNotLastElement ? ', ' : ' ');
            });
        }
        else {
            // single value
            if (this.controlValue) {
                valueLabel = this.controlValue.name;
            }
        }
        this.valueLabel = valueLabel;
    }
    getKeystrokeFunction(key) {
        const keys = new Map();
        keys.set('ArrowDown', () => {
            if (!this.disabled) {
                const showDropdown = this.layer.classList.contains('cwc-picker--visible');
                if (!showDropdown && !this.noToggle) {
                    this.showOverlay();
                }
                this.navigateList(true);
            }
        });
        keys.set('ArrowUp', () => {
            if (!this.disabled) {
                this.navigateList(false);
            }
        });
        keys.set('Escape', e => {
            if (!this.disabled && !this.noToggle) {
                this.hideOverlay(e);
            }
        });
        keys.set('Space', e => {
            if (!this.disabled) {
                const showDropdown = this.layer.classList.contains('cwc-picker--visible');
                if (!showDropdown && !this.noToggle) {
                    this.showOverlay();
                }
                else {
                    this.selectHighlighted(e);
                }
            }
        });
        keys.set('Enter', e => {
            if (!this.disabled) {
                const showDropdown = this.layer.classList.contains('cwc-picker--visible');
                if (!showDropdown && !this.noToggle) {
                    this.showOverlay();
                }
                else {
                    this.selectHighlighted(e);
                }
            }
        });
        return keys.get(key);
    }
    getOrientation(key, elementDimensions, layerDimensions) {
        const formulas = new Map();
        formulas.set('ltr_pn', {
            left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',
            top: elementDimensions.top + elementDimensions.height + 'px',
        });
        formulas.set('ltr_np', {
            left: elementDimensions.left + 'px',
            top: elementDimensions.top - layerDimensions.height + 'px',
        });
        formulas.set('ltr_pp', {
            left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',
            top: elementDimensions.top - layerDimensions.height + 'px',
        });
        formulas.set('ltr_nn', {
            left: elementDimensions.left + 'px',
            top: elementDimensions.top + elementDimensions.height + 'px',
        });
        formulas.set('rtl_pn', {
            left: elementDimensions.left + 'px',
            top: elementDimensions.top + elementDimensions.height + 'px',
        });
        formulas.set('rtl_np', {
            left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',
            top: elementDimensions.top - layerDimensions.height + 'px',
        });
        formulas.set('rtl_pp', {
            left: elementDimensions.left + 'px',
            top: elementDimensions.top - layerDimensions.height + 'px',
        });
        formulas.set('rtl_nn', {
            left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',
            top: elementDimensions.top + elementDimensions.height + 'px',
        });
        return formulas.get(key);
    }
    removeOrphanedLayer() {
        const orphanedLayer = document.querySelector('#' + this.pickerId);
        if (orphanedLayer) {
            orphanedLayer.parentNode.removeChild(orphanedLayer);
        }
    }
    createOverlayLayer() {
        const destination = document.createElement('div');
        destination.setAttribute('id', this.pickerId);
        // store layer ref for later manipulation
        // get the rtl property
        const dir = window.getComputedStyle(this.host, null).getPropertyValue('direction');
        // set layer attributes
        (0,_helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__.s)(destination, {
            role: 'dialog',
            'aria-label': this.ariaLabel,
            'aria-modal': 'true',
            dir,
            class: `cwc-picker ${this.designVersion} cwc-picker--${this.multiple ? 'multiple' : 'single'} cwc-picker__overlay ${this.hidden ? 'cwc-picker--hidden' : 'cwc-picker--visible'} ${this.orientation}`,
        });
        if (this.dropdownMaxHeight) {
            destination.style.maxHeight = this.dropdownMaxHeight + 'px';
        }
        return destination;
    }
    createOptionsFilter() {
        const olHeader = document.createElement('div');
        olHeader.classList.add('cwc-picker__overlay-header');
        const olFilter = document.createElement('input');
        (0,_helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__.s)(olFilter, {
            class: 'cwc-picker__overlay-filter',
            placeholder: this.filterPlaceholder,
            'aria-label': this.filterPlaceholder,
            type: 'text',
            autocomplete: 'off',
            autocorrect: 'off',
            tabindex: '-1',
        });
        olFilter.addEventListener('focusin', () => {
            document.removeEventListener('keydown', this.handleKeystrokes);
        });
        olFilter.addEventListener('focusout', () => {
            document.addEventListener('keydown', this.handleKeystrokes);
        });
        olFilter.addEventListener('input', (e) => {
            // filter the options here
            this.filterOptions(e.target.value);
        });
        olHeader.appendChild(olFilter);
        return olHeader;
    }
    createOptionsScroller() {
        // create the options for the overlay
        const optionsScroller = document.createElement('div');
        optionsScroller.classList.add('cwc-picker__options-scroller');
        optionsScroller.setAttribute('data-empty-message', this.filterEmptyMessage);
        // add select all option if needed
        if (this.multiple && this.selectAll) {
            const selectAllCta = this.createSelectAllCta();
            optionsScroller.appendChild(selectAllCta);
        }
        this.optionsScroller = optionsScroller;
        return optionsScroller;
    }
    createFooterCta() {
        const footer = document.createElement('footer');
        (0,_helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__.s)(footer, {
            class: 'cwc-picker__overlay-footer cwc-picker__overlay-footer--justify-' + this.footerCtaJustify,
        });
        const footerCta = document.createElement('cwc-button');
        const buttonAttributes = {
            variant: this.footerCtaVariant,
        };
        if (this.footerCtaIcon) {
            buttonAttributes[this.footerCtaIconPosition + '-icon'] = this.footerCtaIcon;
        }
        footerCta.innerText = this.footerCtaLabel;
        (0,_helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__.s)(footerCta, buttonAttributes);
        footerCta.addEventListener('cwcClick', () => {
            this.cwcPickerCtaClick.emit();
        });
        footer.appendChild(footerCta);
        return footer;
    }
    setUpOverlay() {
        // we are creating the overlay the old DOM manipulation way to be able to render it as the last element
        // of the page, so that we can position it over any element of the DOM
        const destination = this.createOverlayLayer();
        // filter
        if (this.filter) {
            const olHeader = this.createOptionsFilter();
            destination.appendChild(olHeader);
        }
        // optionScroller
        const optionsScroller = this.createOptionsScroller();
        destination.appendChild(optionsScroller);
        // sync options
        this.createOptions();
        if (this.footerCta) {
            const footerCta = this.createFooterCta();
            destination.appendChild(footerCta);
        }
        return destination;
    }
    createOverlayStyles() {
        // check if it's already there
        let stylesElement = document.querySelector('#cwcPickerOverlayStyles');
        if (!stylesElement) {
            stylesElement = document.createElement('style');
            (0,_helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__.s)(stylesElement, {
                type: 'text/css',
                id: 'cwcPickerOverlayStyles',
            });
            stylesElement.appendChild(document.createTextNode(this.overlayCss));
            document.querySelector('head').appendChild(stylesElement);
        }
    }
    createOption(option) {
        const optionValue = option.getAttribute('value');
        const attributeSelected = option.getAttribute('selected');
        let optionSelected = false;
        if (attributeSelected !== null && attributeSelected !== 'false') {
            optionSelected = true;
        }
        // const optionSelected = attributeSelected ? (attributeSelected !== 'false' ? true : false) : false;
        const optionElement = document.createElement('div');
        optionElement.addEventListener('mouseenter', this.highlightOptionByEvent);
        optionElement.addEventListener('click', this.selectHighlighted);
        (0,_helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__.s)(optionElement, {
            class: 'cwc-picker__option',
            'data-name': option.innerText,
            'data-value': optionValue,
            'data-selected': optionSelected,
        });
        optionElement.innerText = option.innerText;
        if (optionSelected) {
            this.highlightedOption = optionElement;
            this.selectHighlighted({ silent: true });
        }
        return optionElement;
    }
    removeOptionByValue(optionValue) {
        const layerOption = this.optionsScroller.querySelector('[data-value="' + optionValue + '"]');
        const layerDiv = layerOption;
        const optionSelected = layerDiv.dataset.selected === 'true';
        if (optionSelected) {
            this.removeSelectionByValue(optionValue);
        }
        this.optionsScroller.removeChild(layerOption);
    }
    changeOptionAttributeByValue(optionValue, attr, oldValue, newValue) {
        if (optionValue) {
            if (attr === 'selected') {
                newValue = newValue !== null ? true : false;
            }
            const query = '[data-value="' + optionValue + '"]';
            const layerOption = this.optionsScroller.querySelector(query);
            layerOption.removeAttribute('data-' + attr);
            layerOption.setAttribute('data-' + attr, newValue);
        }
    }
    changeOptionTextByValue(optionValue, text) {
        if (optionValue && text) {
            const layerOption = this.optionsScroller.querySelector('[data-value="' + optionValue + '"]');
            layerOption.innerText = text ? text : '';
        }
    }
    createOptions() {
        // query the options within the select
        const selectOptions = this.host.querySelectorAll('option');
        selectOptions.forEach(option => {
            const optionElement = this.createOption(option);
            this.optionsScroller.appendChild(optionElement);
        });
    }
    componentWillLoad() {
        if (!this.pickerId) {
            this.pickerId = 'cwcPicker_' + (0,_helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__.u)();
        }
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
    }
    disconnectedCallback() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
    }
    componentDidLoad() {
        // append DOM layer styles
        this.createOverlayStyles();
        // check for an orphaned layer in DOM;
        this.removeOrphanedLayer();
        const theOverlay = this.setUpOverlay();
        this.layer = theOverlay;
        // append it to the body
        document.querySelector('body').appendChild(theOverlay);
        // if has got to be shown by default, then show it here
        if (this.show) {
            this.showOverlay();
        }
        // anddd an event listener for when the options change
        setTimeout(() => {
            // HERE WE ADD A MUTATION OBSERVER TO LITEN FOR NEW ACCORDIONS
            // SO THAT WHEN ONE IS DYNAMICALLY ADDED, IT WILL BE INITIALIZED
            // Options for the observer (which mutations to observe)
            const observerConfig = {
                attributes: true,
                attributeOldValue: true,
                attributeFilter: ['value', 'selected'],
                childList: true,
                subtree: true,
                characterData: true,
            };
            // Create an observer instance linked to the callback function
            this.optionMutations = new MutationObserver(this.mutationHandler);
            // Start observing the target node for configured mutations
            this.optionMutations.observe(this.host, observerConfig);
        }, 0);
        // set value if declared
        this.controlValue && this.setValueByProp(this.controlValue, null);
    }
    componentDidUnload() {
        if (this.layer) {
            this.layer.parentNode.removeChild(this.layer);
        }
        document.removeEventListener('focusin', this.hasBlured);
        document.removeEventListener('click', this.hasBlured);
    }
    render() {
        return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)(_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.H, { tabindex: "0", role: "button", onFocus: this.onFocus, onClick: this.toggleOverlay, class: `${this.designVersion} ${this.disabled && 'cwc-picker--disabled'}` }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: 'cwc-picker__target ' +
                (this.unwrap ? 'cwc-picker--unwrap' : '') +
                ' cwc-picker--' +
                (this.variant === 'header' || this.variant === 'no-border' ? 'header-noborder' : 'regular') +
                ' cwc-picker--' +
                this.status +
                (this.mobile ? ' cwc-picker--mobile' : ''), role: "listbox" }, this.designVersion !== 'v1' && (this.variant === 'header' || this.variant === 'no-border') ? null : ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: 'cwc-picker__label' + (this.valueLabel === '' && this.mobile ? ' cwc-picker__label--placeholder' : '') }, this.label, " ", this.required ? (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "required" }, " *") : null)), (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: 'cwc-picker__input' +
                (this.disabled ? ' cwc-picker__input--disabled' : '') +
                (this.statusMessage && this.unwrap ? ' cwc-picker__input--extra-margin' : ''), ref: el => (this.targetElement = el) }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: 'cwc-picker__input-output ' + (this.valueLabel !== '' ? '' : 'placeholder') }, this.valueLabel !== '' ? this.valueLabel : this.mobile ? '' : this.placeholder), this.loading ? ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cwc-picker__loader" }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-loader", { size: "small" }))) : null), this.statusMessage ? (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cwc-picker__status-message" }, this.statusMessage) : null), (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
    }
    componentDidRender() {
        this.positionOverlay();
    }
    get host() { return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "multiple": ["updateMultiple"],
        "rtl": ["updateDir"],
        "show": ["handleShow"],
        "stringValues": ["updateStringValues"],
        "value": ["handleValue"],
        "controlValue": ["setValueByProp"]
    }; }
    static get style() { return "\@charset \"UTF-8\";*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host(.v2) .cwc-picker__input{border-radius:8px}[dir=ltr] :host(.v2) .cwc-picker__label{left:.75rem}[dir=rtl] :host(.v2) .cwc-picker__label{right:.75rem}:host(.v2) .cwc-picker__label{color:var(--cwc-picker-label-color,var(--cwc-color-ui-primary-darkest,#001b3a));top:14px;z-index:1;inset-inline-start:.75rem;background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff));padding:0 .25rem;-webkit-transition:all .15s ease;transition:all .15s ease}:host(.v2) .cwc-picker--error .cwc-picker__label{color:var(--cwc-picker-label-error-color,var(--cwc-color-status-error,#ee3d42));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-error-washed-five,#f9f0f0) 0,var(--cwc-color-status-error-washed-five,#f9f0f0))}:host(.v2) .cwc-picker--warning .cwc-picker__label{color:var(--cwc-picker-label-warning-color,var(--cwc-color-status-warning,#fbb03b));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-warning-washed-five,#faf6f0) 0,var(--cwc-color-status-warning-washed-five,#faf6f0))}:host(.v2) .cwc-picker--success .cwc-picker__label{color:var(--cwc-picker-label-success-color,var(--cwc-color-status-success,#7ac943));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-success-washed-five,#f3f7f0) 0,var(--cwc-color-status-success-washed-five,#f3f7f0))}:host(.v2) .cwc-picker--mobile .cwc-picker__label--placeholder{top:35px}:host(.cwc-picker--disabled.v2) .cwc-picker__label:not(.cwc-picker__label--placeholder){color:var(--cwc-picker-label-disabled-color,var(--cwc-color-grayscale-medium,#666));background:-webkit-gradient(linear,left bottom,left top,from(var(--cwc-color-grayscale-light,#d6d6d6)),color-stop(40%,var(--cwc-color-grayscale-white,#fff)),color-stop(60%,var(--cwc-color-grayscale-white,#fff)),to(hsla(0,0%,100%,0)));background:linear-gradient(0deg,var(--cwc-color-grayscale-light,#d6d6d6),var(--cwc-color-grayscale-white,#fff) 40%,var(--cwc-color-grayscale-white,#fff) 60%,hsla(0,0%,100%,0))}:host(.cwc-picker--disabled.v2) .cwc-picker--mobile .cwc-picker__label--placeholder{background:var(--cwc-picker-placeholder-disabled-background,var(--cwc-color-grayscale-light,#d6d6d6))}:host{display:inline-block;outline:none}:host(.cwc-picker--disabled){pointer-events:none}:host(.cwc-picker--disabled) .cwc-picker--mobile .cwc-picker__label:not(.cwc-picker__label--placeholder){color:var(--cwc-picker-mobile-label-color,var(--cwc-color-grayscale-medium,#666));background:-webkit-gradient(linear,left bottom,left top,from(var(--cwc-color-grayscale-light,#d6d6d6)),color-stop(40%,var(--cwc-color-grayscale-white,#fff)),color-stop(60%,var(--cwc-color-grayscale-white,#fff)),to(hsla(0,0%,100%,0)));background:linear-gradient(0deg,var(--cwc-color-grayscale-light,#d6d6d6),var(--cwc-color-grayscale-white,#fff) 40%,var(--cwc-color-grayscale-white,#fff) 60%,hsla(0,0%,100%,0))}::slotted(*){display:none}.cwc-picker__target{display:block;pointer-events:none;position:relative;padding-bottom:1.25rem;padding-top:1.25rem}.cwc-picker__target.cwc-picker--disabled{cursor:not-allowed;pointer-events:none!important}.cwc-picker__target.cwc-picker--unwrap{padding:0}.cwc-picker__label{display:block;font-size:.75rem;line-height:.75rem;color:var(--cwc-picker-label-color,var(--cwc-color-ui-primary-darkest,#001b3a));padding:0 0 .5rem 0;margin:0;pointer-events:none;position:absolute;top:0}.cwc-picker__label .required{color:var(--cwc-picker-label-required-color,var(--cwc-color-status-error,#ee3d42))}[dir=ltr] .cwc-picker__input{padding-right:2.25rem}[dir=rtl] .cwc-picker__input{padding-left:2.25rem}.cwc-picker__input{font-size:1rem;line-height:1rem;border-radius:3px;height:2.5rem;padding:0 1rem;-webkit-padding-end:2.25rem;padding-inline-end:2.25rem;border:.0625rem solid var(--cwc-picker-input-border-color,var(--cwc-color-elements-input-border,#adaebb));background-color:var(--cwc-picker-input-background-color,var(--cwc-color-grayscale-white,#fff));font-family:inherit;-webkit-box-sizing:border-box;box-sizing:border-box;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;cursor:pointer;position:relative;pointer-events:all;outline:none}.cwc-picker__input--active{border-color:var(--cwc-picker-input-active-border-color,var(--cwc-color-links,#3fa9f5))}[dir=ltr] .cwc-picker__input:after{right:.75rem}[dir=rtl] .cwc-picker__input:after{left:.75rem}.cwc-picker__input:after{content:\"\";font-family:dls-icons;color:var(--cwc-picker-input-icon-color,var(--cwc-color-links,#3fa9f5));position:absolute;inset-inline-end:.75rem;-webkit-transition:-webkit-transform .15s ease;transition:-webkit-transform .15s ease;transition:transform .15s ease;transition:transform .15s ease,-webkit-transform .15s ease}.cwc-picker__input.open:after{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.cwc-picker__input-output{display:block;width:100%;max-width:500px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.cwc-picker__input-output.placeholder{color:var(--cwc-picker-input-output-placeholder-color,var(--cwc-color-grayscale-medium,#666));font-size:1rem}.cwc-picker__input--disabled{background-color:var(--cwc-picker-input-disabled-background-color,var(--cwc-color-grayscale-light,#d6d6d6))!important;border-color:var(--cwc-picker-input-disabled-border-color,var(--cwc-color-elements-input-border,#adaebb))!important;color:var(--cwc-picker-input-disabled-color,var(--cwc-color-grayscale-medium,#666));pointer-events:none}.cwc-picker__input--disabled:after{color:var(--cwc-picker-input-icon-disabled-color,var(--cwc-color-elements-input-border,#adaebb))}.cwc-picker__input--extra-margin{margin-bottom:1rem}.cwc-picker__loader{height:100%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.cwc-picker__loader cwc-loader{height:1.5rem!important}[dir=ltr] .cwc-picker__status-message{left:0}[dir=rtl] .cwc-picker__status-message{right:0}.cwc-picker__status-message{font-size:.75rem;width:100%;display:inline-block;position:absolute;inset-inline-start:0;bottom:.125em}.cwc-picker--error .cwc-picker__input{border-color:var(--cwc-picker-input-error-border-color,var(--cwc-color-status-error,#ee3d42));background-color:var(--cwc-picker-input-error-background-color,var(--cwc-color-status-error-alpha-five,rgba(238,61,66,.05)))}.cwc-picker--error .cwc-picker__input:after{color:var(--cwc-picker-input-icon-error-color,var(--cwc-color-status-error,#ee3d42))}.cwc-picker--error .cwc-picker__status-message{color:var(--cwc-picker-status-message-error-color,var(--cwc-color-status-error,#ee3d42))}.cwc-picker--warning .cwc-picker__input{border-color:var(--cwc-picker-input-warning-border-color,var(--cwc-color-status-warning,#fbb03b));background-color:var(--cwc-picker-input-warning-background-color,var(--cwc-color-status-warning-alpha-five,rgba(251,176,59,.05)))}.cwc-picker--warning .cwc-picker__input:after{color:var(--cwc-picker-input-icon-warning-color,var(--cwc-color-status-warning,#fbb03b))}.cwc-picker--warning .cwc-picker__status-message{color:var(--cwc-picker-status-message-warning-color,var(--cwc-color-status-warning,#fbb03b))}.cwc-picker--success .cwc-picker__input{border-color:var(--cwc-picker-input-success-border-color,var(--cwc-color-status-success,#7ac943));background-color:var(--cwc-picker-input-success-background-color,var(--cwc-color-status-success-alpha-five,rgba(122,201,67,.05)))}.cwc-picker--success .cwc-picker__input:after{color:var(--cwc-picker-input-icon-success-color,var(--cwc-color-status-success,#7ac943))}.cwc-picker--success .cwc-picker__status-message{color:var(--cwc-picker-status-message-success-color,var(--cwc-color-status-success,#7ac943))}.cwc-picker--header-noborder .cwc-picker__input{border:none;background:none;padding:0;height:auto;display:-ms-inline-flexbox;display:inline-flex;font-size:inherit}[dir=ltr] .cwc-picker--header-noborder .cwc-picker__input:after{right:auto}[dir=rtl] .cwc-picker--header-noborder .cwc-picker__input:after{left:auto}[dir=ltr] .cwc-picker--header-noborder .cwc-picker__input:after{margin-left:.25rem}[dir=rtl] .cwc-picker--header-noborder .cwc-picker__input:after{margin-right:.25rem}.cwc-picker--header-noborder .cwc-picker__input:after{inset-inline-end:auto;position:relative;-webkit-margin-start:.25rem;margin-inline-start:.25rem}.cwc-picker--header-noborder .cwc-picker__input-output{color:var(--cwc-picker-input-output-header-noborder-color,var(--cwc-color-ui-primary-darkest,#001b3a))}.cwc-picker--header-noborder .cwc-picker__input-output.placeholder{font-size:inherit}.cwc-picker--unwrap .cwc-picker__label{display:none}.cwc-picker--unwrap .cwc-picker__status-message{top:2.75rem;bottom:auto}[dir=ltr] .cwc-picker--mobile .cwc-picker__label{left:.75rem}[dir=rtl] .cwc-picker--mobile .cwc-picker__label{right:.75rem}.cwc-picker--mobile .cwc-picker__label{top:14px;z-index:1;inset-inline-start:.75rem;background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff));padding:0 .25rem;-webkit-transition:all .15s ease;transition:all .15s ease}.cwc-picker--mobile .cwc-picker__label--placeholder{font-size:1rem;top:35px;z-index:1;color:var(--cwc-picker-label-placeholder-mobile-color,var(--cwc-color-grayscale-medium,#666))!important;-webkit-transition:all .15s ease;transition:all .15s ease;background-image:none}.cwc-picker--mobile .cwc-picker__label--active{color:var(--cwc-picker-label-active-mobile-color,var(--cwc-color-links,#3fa9f5))}.cwc-picker--mobile.cwc-picker--error .cwc-picker__label{color:var(--cwc-picker-label-error-mobile-color,var(--cwc-color-status-error,#ee3d42));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-error-washed-five,#f9f0f0) 0,var(--cwc-color-status-error-washed-five,#f9f0f0))}.cwc-picker--mobile.cwc-picker--warning .cwc-picker__label{color:var(--cwc-picker-label-warning-mobile-color,var(--cwc-color-status-warning,#fbb03b));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-warning-washed-five,#faf6f0) 0,var(--cwc-color-status-warning-washed-five,#faf6f0))}.cwc-picker--mobile.cwc-picker--success .cwc-picker__label{color:var(--cwc-picker-label-success-mobile-color,var(--cwc-color-status-success,#7ac943));background-image:linear-gradient(180deg,transparent,transparent 6px,var(--cwc-color-status-success-washed-five,#f3f7f0) 0,var(--cwc-color-status-success-washed-five,#f3f7f0))}.cwc-picker__overlay{display:block;position:fixed;z-index:999;background-image:linear-gradient(180deg,var(--cwc-color-ui-highlight,#3fa9f5),var(--cwc-color-ui-highlight,#3fa9f5) 3px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff));border-radius:3px;-webkit-box-shadow:0 8px 13px rgba(0,0,0,.3);box-shadow:0 8px 13px rgba(0,0,0,.3);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-width:250px;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;opacity:1;max-height:300px;max-width:80vw;padding-top:3px}.cwc-picker__overlay.cwc-picker--hidden{opacity:0;pointer-events:none}.cwc-picker__overlay.np,.cwc-picker__overlay.pp{-ms-flex-item-align:end;align-self:flex-end;-webkit-box-shadow:0 -8px 13px rgba(0,0,0,.3);box-shadow:0 -8px 13px rgba(0,0,0,.3);background-image:linear-gradient(0deg,var(--cwc-color-ui-highlight,#3fa9f5),var(--cwc-color-ui-highlight,#3fa9f5) 3px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff))}[dir=ltr] .cwc-picker__overlay-header:before{margin-left:1.5em}[dir=rtl] .cwc-picker__overlay-header:before{margin-right:1.5em}.cwc-picker__overlay-header:before{content:\"\";font-family:dls-icons;position:absolute;line-height:1.5rem;font-size:1rem;top:.5rem;color:var(--cwc-picker-overlay-header-color,var(--cwc-color-links,#3fa9f5));pointer-events:none;-webkit-margin-start:1.5em;margin-inline-start:1.5em;margin-top:2px}.cwc-picker__overlay-footer{padding:.75rem 0;border-top:1px solid var(--cwc-picker-overlay-footer-border-color,var(--cwc-color-elements-input-border,#adaebb));margin:0 1rem;display:-ms-flexbox;display:flex}.cwc-picker__overlay-footer--justify-start{-ms-flex-pack:start;justify-content:flex-start}.cwc-picker__overlay-footer--justify-end{-ms-flex-pack:end;justify-content:flex-end}[dir=ltr] .cwc-picker__overlay-filter{padding-left:2rem}[dir=rtl] .cwc-picker__overlay-filter{padding-right:2rem}.cwc-picker__overlay-filter{margin:0 1rem;padding:0;-webkit-padding-start:2rem;padding-inline-start:2rem;font-family:inherit;border:none;border-bottom:1px solid var(--cwc-picker-overlay-filter-border-color,var(--cwc-color-elements-input-border,#adaebb));width:calc(100% - 2rem);-webkit-box-sizing:border-box;box-sizing:border-box;font-size:1rem;height:2.5rem;outline:none}.cwc-picker__options-scroller{-ms-flex:1 1 auto;flex:1 1 auto;overflow-y:auto}.cwc-picker__option{padding:.625rem 2rem;cursor:pointer;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.cwc-picker__option--highlighted{background-color:var(--cwc-picker-option-highlight-background-color,var(--cwc-color-elements-bg,#f4f6f9))}\@media (max-width:767px){[dir=ltr] .cwc-picker__overlay{left:0!important}[dir=rtl] .cwc-picker__overlay{right:0!important}.cwc-picker__overlay{top:0!important;inset-inline-start:0!important;width:100%!important;height:100vh!important;max-height:100vh!important;max-width:100vw!important;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background-color:var(--cwc-picker-overlay-backdrop-background-color,var(--cwc-color-ui-primary-darkest-alpha-eighty,rgba(0,27,58,.8)));pointer-events:none!important}.cwc-picker__overlay.nn,.cwc-picker__overlay.np,.cwc-picker__overlay.pn,.cwc-picker__overlay.pp{background-image:none}}"; }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_cmx-web-components_core_dist_esm_cwc-picker_entry_js.js.map