{"version":3,"file":"src_app_auth_pages_password_email_email_module_ts.js","mappings":"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AAI,GAAJ,IAAI,CAAY;IACtB,CAAC;IAEE,cAAc,CAAC,IAAS;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,2BAA2B,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;CAgBF;;YAhCQ,4DAAU;;AAQN,qBAAqB;IAHjC,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,qBAAqB,CAwBjC;AAxBiC;;;;;;;;;;;;;;;ACT3B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACT2C;AACA;AACpC,2CAA2C,mDAAK;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mDAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrD+C;AACxC,qBAAqB,uDAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRkC;AAC3B,0BAA0B,2CAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9EyC;AAClC,6BAA6B,iDAAS;AAC7C,uCAAuC,qDAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5C4C;AACM;AAC3C,2BAA2B,2DAAc,CAAC,qDAAW;AACrD","sources":["./src/app/auth/pages/password/email/email-routing.module.ts","./src/app/auth/pages/password/email/email.module.ts","./src/app/auth/pages/password/email/email.page.ts","./src/app/services/auth/forgot-password.service.ts","./node_modules/rxjs/_esm2015/internal/Scheduler.js","./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js","./node_modules/rxjs/_esm2015/internal/scheduler/Action.js","./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js","./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/async.js"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EmailPage } from './email.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmailPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EmailPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { EmailPage } from './email.page';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EmailPageRoutingModule } from './email-routing.module';\r\nimport { ComponentsModule } from '../../../../components/components.module';\r\nimport { ErrorMessagesComponent } from 'src/app/utilities/error-messages/error-messages.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    IonicModule,\r\n    CommonModule,\r\n    ComponentsModule,\r\n    ReactiveFormsModule,\r\n    EmailPageRoutingModule\r\n  ],\r\n  declarations: [EmailPage, ErrorMessagesComponent]\r\n})\r\nexport class EmailPageModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder,  FormGroup, Validators, NgForm } from '@angular/forms';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { ForgotPasswordService } from '../../../../services/auth/forgot-password.service';\r\nimport { ErrorMessagesService } from '../../../../services/error-messages.service';\r\n\r\n@Component({\r\n  selector: 'app-email',\r\n  templateUrl: './email.page.html',\r\n  styleUrls: ['./email.page.scss'],\r\n})\r\nexport class EmailPage implements OnInit {\r\n\r\n  form: FormGroup;\r\n\r\n  statusInputEmail = 'regular';\r\n  statusInputMessageEmail = '';\r\n\r\n  email: string = null;\r\n  errors: string[] = [];\r\n  loading = false;\r\n  alertSucces = false;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private errorMessages: ErrorMessagesService,\r\n    private forgotPasswordService: ForgotPasswordService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.formBuilderInput();\r\n  }\r\n  async sendEmail(){\r\n    this.loading = true;\r\n    await this.forgotPasswordService.forgotPassword(this.form.value).subscribe(async resp =>{\r\n      // eslint-disable-next-line @typescript-eslint/dot-notation\r\n      if(resp['token']){\r\n        this.loading = false;\r\n        this.alertSucces = true;\r\n        this.form.reset();\r\n      }\r\n    }, (error)=>{\r\n      this.loading = false;\r\n      this.errors = this.errorMessages.parsearErroresAPI(error);\r\n    }\r\n    );\r\n\r\n  }\r\n\r\n  /*=============================================\r\n   FORMULARIOS REACTIVOS\r\n  =============================================*/\r\n  formBuilderInput(){\r\n    this.form = this.formBuilder.group({\r\n      email: ['', [\r\n        Validators.required,\r\n      ]],\r\n    });\r\n\r\n    this.form.valueChanges\r\n    .pipe(\r\n      debounceTime(350),\r\n    )\r\n    .subscribe(data => {\r\n       this.validateInput();\r\n    });\r\n  }\r\n  validateInput(){\r\n    if(this.form.get('email').errors && this.form.get('email').dirty){\r\n      this.statusInputEmail = 'error';\r\n      this.statusInputMessageEmail = 'Este campo es requerido';\r\n     }else{\r\n      this.statusInputEmail = 'regular';\r\n      this.statusInputMessageEmail = '';\r\n     }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst URL = environment.url;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ForgotPasswordService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  public forgotPassword(data: any) {\r\n    return this.http.post(`${URL}/api/auth/forgot-password`, data);\r\n  }\r\n\r\n  // forgotPassword(email: string){\r\n  //   const data = { email };\r\n\r\n  //   return new Promise(resolve =>{\r\n  //    this.http.post(`${URL}/api/auth/forgot-password`, data).subscribe(async resp =>{\r\n  //       if (resp[\"token\"]){\r\n  //         resolve(true);\r\n  //       } else {\r\n  //          resolve(false);\r\n  //       }\r\n  //    });\r\n  //   });\r\n  // }\r\n\r\n}\r\n","export class Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = () => Date.now();\n","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function debounceTime(dueTime, scheduler = async) {\n    return (source) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nclass DebounceTimeOperator {\n    constructor(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    }\n}\nclass DebounceTimeSubscriber extends Subscriber {\n    constructor(destination, dueTime, scheduler) {\n        super(destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    }\n    _complete() {\n        this.debouncedNext();\n        this.destination.complete();\n    }\n    debouncedNext() {\n        this.clearDebounce();\n        if (this.hasValue) {\n            const { lastValue } = this;\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    }\n    clearDebounce() {\n        const debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    }\n}\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","import { Action } from './Action';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        clearInterval(id);\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, delay) {\n        let errored = false;\n        let errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    _unsubscribe() {\n        const id = this.id;\n        const scheduler = this.scheduler;\n        const actions = scheduler.actions;\n        const index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    }\n}\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, () => {\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n                return AsyncScheduler.delegate.now();\n            }\n            else {\n                return now();\n            }\n        });\n        this.actions = [];\n        this.active = false;\n        this.scheduled = undefined;\n    }\n    schedule(work, delay = 0, state) {\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n            return AsyncScheduler.delegate.schedule(work, delay, state);\n        }\n        else {\n            return super.schedule(work, delay, state);\n        }\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift());\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n"],"names":[],"sourceRoot":"webpack:///"}