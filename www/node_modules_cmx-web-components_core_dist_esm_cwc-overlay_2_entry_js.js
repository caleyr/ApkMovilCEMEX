"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_cmx-web-components_core_dist_esm_cwc-overlay_2_entry_js"],{

/***/ 27345:
/*!********************************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ destroyBasics),
/* harmony export */   "i": () => (/* binding */ initBasics)
/* harmony export */ });
function InitializeDirectionDetection(hostElement) {
    // the function that sets the dir in the shadow dom
    function executeDir(dir) {
        const shadowKids = hostElement.shadowRoot.childNodes;
        shadowKids.forEach(element => {
            element.setAttribute('dir', dir);
        });
    }
    function intervalHandler() {
        const actualDir = hostElement.dataset.dir;
        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');
        if (dir !== actualDir) {
            hostElement.dataset.dir = dir;
            hostElement.shadowRoot && executeDir(dir);
            if (dir === 'rtl') {
                return hostElement.setAttribute('rtl', 'true');
            }
            return hostElement.removeAttribute('rtl');
        }
    }
    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);
}
function DestroyDirectionDetection(hostElement) {
    if (hostElement && hostElement['rtlInterval']) {
        clearInterval(hostElement['rtlInterval']);
    }
}

function setDesignVersion() {
    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');
    return frameworkVersion ? frameworkVersion : 'v1';
}

function initBasics(componentClass) {
    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());
    if (!componentClass.rtl) {
        componentClass.host && InitializeDirectionDetection(componentClass.host);
    }
}
function destroyBasics(componentClass) {
    DestroyDirectionDetection(componentClass.host);
}




/***/ }),

/***/ 54263:
/*!*******************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/cwc-overlay_2.entry.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cwc_overlay": () => (/* binding */ Overlay),
/* harmony export */   "cwc_select_option": () => (/* binding */ SelectOption)
/* harmony export */ });
/* harmony import */ var D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core-cf426fab.js */ 98545);
/* harmony import */ var _commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonComponentFeatures-b771e888.js */ 27345);



const Overlay = class {
  constructor(hostRef) {
    (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.selectMaxHeight = 500;
    this.hidden = true;
    this.layerStyle = {};
    this.orientation = 'nn';
    /**
     * The design version of the framework
     */

    this.designVersion = null;
    /**
     * Shows and hides the overlay
     */

    this.show = false;
    /**
     * disables overlay toggling on target element click
     */

    this.noToggle = false;
    /**
     * disables the overlay funcitonality
     */

    this.disabled = false;
    /**
     * Specify whether component should render from right to left
     */

    this.variant = 'select';
    /**
     * Specify the width of the layer in CSS units
     */

    this.width = '300px';
    /**
     * Specify the minWidth of the layer in CSS units
     */

    this.minWidth = '250px';
    /**
     * Specify the height of the layer in CSS units
     */

    this.height = '220px';
    /**
     * Specify whether component should render from right to left
     */

    this.rtl = false;
    /**
     * Specify whether component should render as block or inline element
     */

    this.block = false; // this function toggles the overlay state

    this.toggleOverlay = e => {
      if (!this.disabled && !this.noToggle) {
        if (this.hidden) {
          return this.showOverlay();
        }

        return this.hideOverlay(e);
      }
    }; // this funciton shows the overlay


    this.showOverlay = () => {
      setTimeout(() => {
        document.addEventListener('scroll', this.hideOverlay, true);
        document.addEventListener('cwcScroll', this.hideOverlay, true);
        window.addEventListener('resize', this.hideOverlay);
        document.addEventListener('click', this.hideOverlay);
      });
      this.positionOverlay();
      const pointerEvents = {
        pointerEvents: 'all'
      };
      this.layerStyle = Object.assign(Object.assign({}, this.layerStyle), pointerEvents);
      this.hidden = false;
      this.showEvent.emit(true);
    }; // this function hides the overlay


    this.hideOverlay = e => {
      // determine if the click is within the content slot that's within the overlay
      const path = e.composedPath(); // sometimes we send a fake event without composed path when we hide the overlay by prop
      // therefore we force the "clickoutside" by just saying it was outside

      const isWithin = path ? this.isWithin(this.layer, path) : false;

      if (!isWithin) {
        document.removeEventListener('scroll', this.hideOverlay, true);
        document.removeEventListener('cwcScroll', this.hideOverlay, true);
        window.removeEventListener('resize', this.hideOverlay);
        document.removeEventListener('click', this.hideOverlay);
        const pointerEvents = {
          pointerEvents: 'none'
        };
        this.layerStyle = Object.assign(Object.assign({}, this.layerStyle), pointerEvents);
        this.hidden = true;
        this.showEvent.emit(false);
      }
    };

    this.positionOverlay = () => {
      // find position on screen
      const elementDimensions = this.targetElement.getBoundingClientRect(); // get overlay dimensions

      const layerDimensions = this.layer.getBoundingClientRect(); // get window width and height

      const windowDimensions = {
        width: document.documentElement.clientWidth,
        height: document.documentElement.clientHeight
      }; // define base overlay style

      const minWidth = this.width === 'auto' && this.block ? this.targetElement.getBoundingClientRect().width + 'px' : this.minWidth;
      const layerStyle = {
        width: this.layerStyle.width,
        height: layerDimensions.height + 'px',
        left: '',
        top: '',
        pointerEvents: 'all',
        minWidth
      };
      let caseString;
      let flow;
      let lateralOverflow;
      let verticalOverflow;
      /*
      EXPLANATION OF NOMENCLATURE
               When organizing the direction that the overlay has to go
      the class names were chosen around the positive/negative orientation for each axis
      therefore, a class name of 'pp' means that the overlay is flowing
      positively horizontally (to the start) and positively vertically (upwards).
      This also means that a class name of 'nn' determines that
      the overlay should open negatively horizontally (to the end) and negatively vertically (downwards).
               All calsses are build using this logic.
      */

      if (this.direction) {
        flow = 'ltr';
        const directionArray = this.direction.split('');
        caseString = (directionArray[1] === 'w' ? 'p' : 'n') + (directionArray[0] === 'n' ? 'p' : 'n');
      } else {
        if (!this.rtl) {
          // calculate if overflows
          lateralOverflow = elementDimensions.left + layerDimensions.width - windowDimensions.width;
          verticalOverflow = elementDimensions.top + layerDimensions.height - windowDimensions.height; // define the overflow scenario for a particular class and the positioning switch
          // display overlay downwards when window heigh is smaller than the overlay

          caseString = windowDimensions.height < layerDimensions.height ? (lateralOverflow > 0 ? 'p' : 'n') + 'n' : (lateralOverflow > 0 ? 'p' : 'n') + (verticalOverflow > 0 ? 'p' : 'n'); // if (windowDimensions.height < layerDimensions.height) {
          //   caseString = (lateralOverflow > 0 ? 'p' : 'n') + 'n';
          // } else {
          //   caseString = (lateralOverflow > 0 ? 'p' : 'n') + (verticalOverflow > 0 ? 'p' : 'n');
          // }

          flow = 'ltr';
        } else {
          // calculate if overflows
          lateralOverflow = elementDimensions.right - layerDimensions.width;
          verticalOverflow = elementDimensions.top + layerDimensions.height - windowDimensions.height; // define the overflow scenario for a particular class and the positioning switch
          // display overlay downwards when window heigh is smaller than the overlay

          caseString = windowDimensions.height < layerDimensions.height ? (lateralOverflow < 0 ? 'p' : 'n') + 'n' : (lateralOverflow < 0 ? 'p' : 'n') + (verticalOverflow > 0 ? 'p' : 'n'); // if (windowDimensions.height < layerDimensions.height) {
          //   caseString = (lateralOverflow < 0 ? 'p' : 'n') + 'n';
          // } else {
          //   caseString = (lateralOverflow < 0 ? 'p' : 'n') + (verticalOverflow > 0 ? 'p' : 'n');
          // }

          flow = 'rtl';
        }
      } // get the top left values with the orientation string


      const topleft = this.getOrientation(`${flow}_${caseString}`, elementDimensions, layerDimensions); // assign the new layer style

      this.layerStyle = Object.assign(Object.assign({}, layerStyle), topleft); // assign the orientation for custom orientation classes

      this.orientation = caseString;
    };

    this.setLayerStyle = layerStyles => {
      this.layerStyle = Object.assign({
        width: this.width,
        height: this.height
      }, layerStyles);
    };

    this.onSlotChange = () => {
      const pointerEvents = this.hidden ? 'none' : 'all';
      this.layerStyle = {
        pointerEvents
      };
      this.setLayerStyle({
        pointerEvents
      }); // Correct dimensions for variant select

      if (this.variant === 'select') {
        setTimeout(() => {
          this.correctLayerDimensionsOnSelect(pointerEvents);
        }, 100);
      }
    };

    this.showEvent = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "cwcShow", 7);
  }

  handleShow(newValue, oldValue) {
    if (newValue !== oldValue) {
      if (this.show) {
        this.showOverlay();
      } else {
        this.hideOverlay({
          target: this.targetElement,

          composedPath() {
            return false;
          }

        });
      }
    }
  }

  setWidth(newValue, oldValue) {
    if (oldValue !== newValue) {
      this.width = newValue;
      this.setLayerStyle({
        pointerEvents: 'none'
      });
    }
  }

  setHeight(newValue, oldValue) {
    if (oldValue !== newValue) {
      this.height = newValue;
      this.setLayerStyle({
        pointerEvents: 'none'
      });
    }
  }
  /**
   * Method to toggle the overlay state programatically.
   */


  toggle(e) {
    var _this = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.toggleOverlay(e);
    })();
  }
  /**
   * Method to determine if the overlay is shown at a specific moment.
   */


  isShown() {
    var _this2 = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return !_this2.hidden;
    })();
  } // this function determines if an element is within another


  isWithin(parent, path) {
    for (const element of path) {
      if (parent === element) {
        return true;
      }
    }

    return false;
  }

  getOrientation(key, elementDimensions, layerDimensions) {
    const formulas = new Map();
    formulas.set('ltr_pn', {
      left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',
      top: elementDimensions.top + elementDimensions.height + 'px'
    });
    formulas.set('ltr_np', {
      left: elementDimensions.left + 'px',
      top: elementDimensions.top - layerDimensions.height + 'px'
    });
    formulas.set('ltr_pp', {
      left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',
      top: elementDimensions.top - layerDimensions.height + 'px'
    });
    formulas.set('ltr_nn', {
      left: elementDimensions.left + 'px',
      top: elementDimensions.top + elementDimensions.height + 'px'
    });
    formulas.set('rtl_pn', {
      left: elementDimensions.left + 'px',
      top: elementDimensions.top + elementDimensions.height + 'px'
    });
    formulas.set('rtl_np', {
      left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',
      top: elementDimensions.top - layerDimensions.height + 'px'
    });
    formulas.set('rtl_pp', {
      left: elementDimensions.left + 'px',
      top: elementDimensions.top - layerDimensions.height + 'px'
    });
    formulas.set('rtl_nn', {
      left: elementDimensions.left + elementDimensions.width - layerDimensions.width + 'px',
      top: elementDimensions.top + elementDimensions.height + 'px'
    });
    return formulas.get(key);
  }

  handleKeyDown(event) {
    if (event.key === 'Escape') {
      this.hideOverlay({
        target: this.targetElement,

        composedPath() {
          return false;
        }

      });
    }
  }

  componentWillLoad() {
    this.setLayerStyle({
      pointerEvents: 'none'
    });
    (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_2__.i)(this);
  }

  componentDidLoad() {
    if (this.show) {
      this.showOverlay();
    }

    this.layer.querySelector('slot[name="content"]').addEventListener('slotchange', this.onSlotChange);
  }

  disconnectedCallback() {
    (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_2__.d)(this);
  }
  /**
   * Correct overlay dimensions
   * When the component is on its max height, define this height to the component
   * to prevent hiding scrollbar
   */


  correctLayerDimensionsOnSelect(pointerEvents) {
    const layerDimensions = this.layer.getBoundingClientRect();

    if (layerDimensions.height === this.selectMaxHeight) {
      const correctedDimensions = {
        pointerEvents,
        height: layerDimensions.height + 'px'
      };
      this.setLayerStyle(correctedDimensions);
    }
  }

  render() {
    return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)(_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: `${this.designVersion} ${this.block && 'block'}`
    }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      ref: el => this.targetElement = el,
      class: 'cwc-overlay__target' + (this.disabled ? ' disabled' : ''),
      role: "button",
      onClick: this.toggleOverlay,
      style: {
        display: this.block ? 'block' : 'inline-block'
      }
    }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "target"
    })), (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      ref: el => this.layer = el,
      class: `cwc-overlay ${this.designVersion} ${this.variant} ${this.orientation} ${this.hidden && 'hidden'}`,
      style: this.layerStyle,
      role: "dialog",
      "aria-label": this.ariaLabel,
      "aria-modal": "true"
    }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "content"
    })));
  }

  get host() {
    return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "show": ["handleShow"],
      "width": ["setWidth"],
      "height": ["setHeight"]
    };
  }

  static get style() {
    return "*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:inline-block}:host(.block),:host(.block) .cwc-overlay__target slot{display:block}.cwc-overlay{display:-ms-flexbox;display:flex;position:fixed;z-index:999}.cwc-overlay__target{display:inline-block}.cwc-overlay__target.disabled{cursor:not-allowed;pointer-events:none!important}.cwc-overlay__target>slot{display:inline-block}.cwc-overlay.select{width:100%;height:100%;background-image:linear-gradient(180deg,var(--cwc-color-ui-highlight,#3fa9f5),var(--cwc-color-ui-highlight,#3fa9f5) 3px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff));border-radius:3px;-webkit-box-shadow:0 8px 13px rgba(0,0,0,.3);box-shadow:0 8px 13px rgba(0,0,0,.3);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-width:40px;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;opacity:1;max-height:500px;-webkit-transform-origin:top;transform-origin:top}.cwc-overlay.select>slot{display:block;width:100%;height:calc(100% - 3px);margin-top:3px;opacity:1;overflow:hidden}.cwc-overlay.hidden{opacity:0;-webkit-animation-name:opacityrev,bgheightrev;animation-name:opacityrev,bgheightrev}.cwc-overlay.hidden,.cwc-overlay:not(.hidden){-webkit-animation-duration:.4s;animation-duration:.4s}.cwc-overlay:not(.hidden){-webkit-animation-name:bgheight,opacity;animation-name:bgheight,opacity}\@-webkit-keyframes opacity{0%{opacity:0}to{opacity:1}}\@keyframes opacity{0%{opacity:0}to{opacity:1}}\@-webkit-keyframes opacityrev{0%{opacity:1}to{opacity:0}}\@keyframes opacityrev{0%{opacity:1}to{opacity:0}}\@-webkit-keyframes bgheight{0%{-webkit-transform:scaleY(0);transform:scaleY(0)}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}\@keyframes bgheight{0%{-webkit-transform:scaleY(0);transform:scaleY(0)}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}\@-webkit-keyframes bgheightrev{0%{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}\@keyframes bgheightrev{0%{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}.cwc-overlay.np,.cwc-overlay.pp{-webkit-transform-origin:bottom;transform-origin:bottom;-ms-flex-item-align:end;align-self:flex-end;-webkit-box-shadow:0 -8px 13px rgba(0,0,0,.3);box-shadow:0 -8px 13px rgba(0,0,0,.3);background-image:linear-gradient(0deg,var(--cwc-color-ui-highlight,#3fa9f5),var(--cwc-color-ui-highlight,#3fa9f5) 3px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff))}.cwc-overlay.np>slot,.cwc-overlay.pp>slot{margin-top:0;margin-bottom:3px}.popover{width:100%;height:100%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;border-radius:0;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;-webkit-filter:drop-shadow(0 8px 13px rgba(0,0,0,.3));filter:drop-shadow(0 8px 13px rgba(0,0,0,.3))}[dir=ltr] .popover slot{left:0}[dir=ltr] .popover slot,[dir=rtl] .popover slot{right:0}[dir=rtl] .popover slot{left:0}.popover slot{display:block;position:absolute;top:8px;inset-inline-start:0;inset-inline-end:0;bottom:0;z-index:1}[dir=ltr] .popover:before{border-left:8px solid transparent}[dir=ltr] .popover:before,[dir=rtl] .popover:before{border-right:8px solid transparent}[dir=rtl] .popover:before{border-left:8px solid transparent}[dir=ltr] .popover:before{margin-left:1rem}[dir=rtl] .popover:before{margin-right:1rem}.popover:before{content:\" \";display:block;width:0;height:0;-webkit-border-start:8px solid transparent;border-inline-start:8px solid transparent;-webkit-border-end:8px solid transparent;border-inline-end:8px solid transparent;border-bottom:8px solid var(--cwc-overlay-popover-border-color,var(--cwc-color-grayscale-white,#fff));-webkit-margin-start:1rem;margin-inline-start:1rem}.popover:after{content:\" \";display:block;background-color:var(--cwc-overlay-popover-background-color,var(--cwc-color-grayscale-white,#fff));width:100%;height:calc(100% - 8px)}.popover.hidden{opacity:0;pointer-events:none}[dir=ltr] .popover.pn:before,[dir=ltr] .popover.pp:before{margin-left:auto}[dir=rtl] .popover.pn:before,[dir=rtl] .popover.pp:before{margin-right:auto}[dir=ltr] .popover.pn:before,[dir=ltr] .popover.pp:before{margin-right:1rem}[dir=rtl] .popover.pn:before,[dir=rtl] .popover.pp:before{margin-left:1rem}.popover.pn:before,.popover.pp:before{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:1rem;margin-inline-end:1rem}.popover.np,.popover.pp{-ms-flex-item-align:end;align-self:flex-end;-ms-flex-flow:column-reverse;flex-flow:column-reverse;background-image:none}.popover.np slot,.popover.pp slot{top:0;bottom:8px}.popover.np:before,.popover.pp:before{-webkit-transform:scale(-1);transform:scale(-1)}\@media (max-width:767px){[dir=ltr] .cwc-overlay.popover,[dir=ltr] .cwc-overlay.select{left:0!important}[dir=rtl] .cwc-overlay.popover,[dir=rtl] .cwc-overlay.select{right:0!important}.cwc-overlay.popover,.cwc-overlay.select{top:0!important;inset-inline-start:0!important;width:100%!important;height:100vh!important;max-height:100vh!important;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background-color:var(--cwc-overlay-popover-max-background-color,var(--cwc-color-ui-primary-darkest-alpha-eighty,rgba(0,27,58,.8)));pointer-events:none!important}.cwc-overlay.popover>slot,.cwc-overlay.select>slot{width:calc(100% - 64px);max-height:calc(100vh - 64px);min-height:350px;min-height:10px;-ms-flex-item-align:center;align-self:center;pointer-events:all;height:auto;background-image:linear-gradient(180deg,var(--cwc-color-ui-highlight,#3fa9f5),var(--cwc-color-ui-highlight,#3fa9f5) 3px,var(--cwc-color-grayscale-white,#fff) 0,var(--cwc-color-grayscale-white,#fff))}.cwc-overlay.popover.hidden,.cwc-overlay.select.hidden{background-color:transparent}.cwc-overlay.popover.hidden>slot,.cwc-overlay.select.hidden>slot{pointer-events:none}.cwc-overlay.popover.nn,.cwc-overlay.popover.np,.cwc-overlay.popover.pn,.cwc-overlay.popover.pp,.cwc-overlay.select.nn,.cwc-overlay.select.np,.cwc-overlay.select.pn,.cwc-overlay.select.pp{background-image:none}.cwc-overlay.popover slot,.cwc-overlay.select slot{margin-bottom:0;overflow:auto;position:relative}.cwc-overlay.popover>slot{background-image:none;background-color:var(--cwc-overlay-popover-max-slot-background-color,var(--cwc-color-grayscale-white,#fff))}.cwc-overlay.popover:after,.cwc-overlay.popover:before{display:none}}";
  }

};
const SelectOption = class {
  constructor(hostRef) {
    (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * The design version of the framework
     */

    this.designVersion = null;
    /**
     * Enables debug logging via console.info
     */

    this.debug = false;
    /**
     * Allows unselection of single option
     */

    this.allowUnselection = false;
    /**
     * If set to true, disables emitting event for current action iteration
     */

    this.disableEmit = false;
    /**
     * Represent if option selected by Prop()
     */

    this.selectedByProp = true;
    /**
     * Sets option as selected
     */

    this.selected = false;
    /**
     * Sets option as focused
     */

    this.focused = false;
    /**
     * Defines if the option is right to left
     */

    this.rtl = false;
    /**
     * Hides option - used in filtered option list
     */

    this.hidden = false;
    /**
     * Defines if the option is multiple (display checkbox)
     */

    this.multiple = false;
    this.optionSelectedEvent = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "cwcSelectOptionSelected", 7);
  }

  changeSelected(newValue, oldValue) {
    this.debug && console.info(`selected prop (value: ${this.value}, selectedByProp: ${this.selectedByProp}, disableEmit: ${this.disableEmit}) changed from ${oldValue} to ${newValue}`);
    this.onSelectedPropChange();
  }
  /**
   * Select option from outside of the component
   */


  selectOption(disableEmit = false) {
    var _this3 = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (disableEmit) {
        _this3.disableEmit = disableEmit;
      }

      _this3.selected = true;
    })();
  }
  /**
   * Unselect option from outside of the component
   */


  unselectOption(disableEmit = false) {
    var _this4 = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (disableEmit) {
        _this4.disableEmit = disableEmit;
      }

      _this4.selected = false;
    })();
  }
  /**
   * Hide option in the list - used in options filter
   */


  hideOption() {
    var _this5 = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this5.hidden = true;
    })();
  }
  /**
   * Show option in the list - used in options filter
   */


  showOption() {
    var _this6 = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this6.hidden = false;
    })();
  }
  /**
   * Highlight search characters - used in search filter
   */


  highlightText(searchQuery) {
    var _this7 = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // Clear highlights
      _this7.host.innerHTML = _this7.host.innerHTML.replace(new RegExp('<strong>', 'ig'), '').replace(new RegExp('</strong>', 'ig'), ''); // if search string is null or empty then return

      if (!searchQuery) return; // Match the characters to the search query and highlight them

      const originalString = _this7.host.innerHTML;
      const index = originalString.search(new RegExp(searchQuery, 'ig')); // If string has been found highlight it in bold

      if (index > -1) {
        _this7.host.innerHTML = originalString.substring(0, index) + '<strong>' + originalString.substring(index, index + searchQuery.length) + '</strong>' + originalString.substring(index + searchQuery.length);
      }
    })();
  }
  /**
   * Set option as multiple
   */


  setOptionAsMultiple() {
    var _this8 = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this8.multiple = true;

      if (_this8.selected) {
        _this8.setCheckboxChecked(true);
      }
    })();
  }
  /**
   * Set option as simple
   */


  setOptionAsSimple() {
    var _this9 = this;

    return (0,D_Documentos_Documentos_DocumentosPersonales_Cemex_ApkMovilCEMEX_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this9.multiple = false;
    })();
  }
  /**
   * Lifecycle hook - componentWillLoad
   */


  componentWillLoad() {
    if (this.host) {
      this.multiple = this.host.parentElement['multiple'] || false;
      this.rtl = this.host.parentElement['rtl'] || false;
      this.allowUnselection = this.host.parentElement['allowUnselection'] || false;
    }

    (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_2__.i)(this);
  }
  /**
   * Lifecycle hook - componentDidLoad
   */


  componentDidLoad() {
    if (this.selected && this.multiple) {
      this.setCheckboxChecked(this.selected);
    }

    this.parentElement = this.host.parentElement;
    this.parentElement && this.parentElement.registerOption && this.parentElement.registerOption(this.host);
  }

  disconnectedCallback() {
    this.selected = false;
    this.parentElement && this.parentElement.unregisterOption && this.parentElement.unregisterOption(this.host);
    (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_2__.d)(this);
  }

  onSelectedPropChange() {
    // In case of multi option, check the checkbox
    if (this.multiple) {
      this.setCheckboxChecked(this.selected);
    } // Emit event to parent component if it is allowed by disableEmit and is selected


    if (this.disableEmit === false || this.selectedByProp === false) {
      this.emitSelectedEvent();
    }

    this.disableEmit = false;
  }

  emitSelectedEvent() {
    const emitData = {
      name: this.host.innerText,
      value: this.value,
      selected: this.selected,
      selectedByProp: this.selectedByProp
    };
    this.debug && console.info('emitting optionSelectedEvent', emitData);
    this.optionSelectedEvent.emit(emitData);
    this.selectedByProp = true;
  }

  onOptionClick() {
    const isDisabledOption = this.disabled && this.multiple;
    this.selectedByProp = false;

    if (isDisabledOption) {
      this.debug && console.info(`option ${this.value} is disabled, click has no effect`);
      return;
    }

    if (!this.multiple && !this.allowUnselection && this.selected) {
      this.debug && console.info(`single option ${this.value} is doesn't allow unselection, set allowUnselection prop to change this`);
      return;
    }

    this.selected = !this.selected;
    this.debug && console.info(`option ${this.value} clicked, selected: ${this.selected}`);
  }

  setCheckboxChecked(isChecked) {
    if (this.checkboxElement) {
      this.checkboxElement.checked = isChecked;
    }
  }

  render() {
    let optionElement;

    if (this.multiple) {
      optionElement = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("cwc-checkbox", {
        variant: "select-option",
        disabled: this.disabled,
        onCwcChange: event => event.stopPropagation(),
        tabindex: "-1",
        ref: el => this.checkboxElement = el
      }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
    } else {
      optionElement = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
        class: "dropdown-option-simple"
      }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
    }

    return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: `cwc-select-dd__option ${this.selected && 'selected'} ${this.multiple && 'multiple'} ${this.hidden && 'hidden'} ${this.focused && 'hover'}`,
      onClick: this.onOptionClick.bind(this),
      role: "option"
    }, optionElement);
  }

  get host() {
    return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "selected": ["changeSelected"]
    };
  }

  static get style() {
    return "*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:block}.cwc-select-dd__option{padding:.625rem 2rem;cursor:pointer;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.cwc-select-dd__option.hover{background-color:var(--cwc-select-option-hover-backgorund-color,var(--cwc-color-elements-bg,#f4f6f9))}.cwc-select-dd__option.multiple{padding:0}.cwc-select-dd__option.multiple>*{width:100%;padding:0}.cwc-select-dd__option.selected .dropdown-option-simple{position:relative}.cwc-select-dd__option.selected .dropdown-option-simple:before{content:\"\";width:24px;height:16px;position:absolute;left:-26px;top:2px;background-image:url(\"data:image/svg+xml,%3Csvg%20width%3D%22500%22%20height%3D%22500%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill%3D%22%233FA9F5%22%20d%3D%22M191.433%20401.667L40%20284.767l74.667-74.667%2078.166%2079.8%20190.4-191.567%2076.767%2073.5z%22%20fill-rule%3D%22evenodd%22%2F%3E%3C%2Fsvg%3E\");background-size:contain;background-repeat:no-repeat;background-position:50%}.cwc-select-dd__option.selected.hover{background-color:var(--cwc-select-option-selected-hover-backgorund-color,var(--cwc-color-elements-bg,#f4f6f9))}.cwc-select-dd__option.hidden{display:none}\@media (hover:hover){.cwc-select-dd__option:hover{background-color:var(--cwc-select-option-hover-background-color,var(--cwc-color-elements-bg,#f4f6f9))}}";
  }

};


/***/ })

}]);
//# sourceMappingURL=node_modules_cmx-web-components_core_dist_esm_cwc-overlay_2_entry_js.js.map