"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_cmx-web-components_core_dist_esm_cwc-breadcrumbs_entry_js"],{

/***/ 27345:
/*!********************************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ destroyBasics),
/* harmony export */   "i": () => (/* binding */ initBasics)
/* harmony export */ });
function InitializeDirectionDetection(hostElement) {
    // the function that sets the dir in the shadow dom
    function executeDir(dir) {
        const shadowKids = hostElement.shadowRoot.childNodes;
        shadowKids.forEach(element => {
            element.setAttribute('dir', dir);
        });
    }
    function intervalHandler() {
        const actualDir = hostElement.dataset.dir;
        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');
        if (dir !== actualDir) {
            hostElement.dataset.dir = dir;
            hostElement.shadowRoot && executeDir(dir);
            if (dir === 'rtl') {
                return hostElement.setAttribute('rtl', 'true');
            }
            return hostElement.removeAttribute('rtl');
        }
    }
    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);
}
function DestroyDirectionDetection(hostElement) {
    if (hostElement && hostElement['rtlInterval']) {
        clearInterval(hostElement['rtlInterval']);
    }
}

function setDesignVersion() {
    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');
    return frameworkVersion ? frameworkVersion : 'v1';
}

function initBasics(componentClass) {
    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());
    if (!componentClass.rtl) {
        componentClass.host && InitializeDirectionDetection(componentClass.host);
    }
}
function destroyBasics(componentClass) {
    DestroyDirectionDetection(componentClass.host);
}




/***/ }),

/***/ 21979:
/*!*********************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/cwc-breadcrumbs.entry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cwc_breadcrumbs": () => (/* binding */ Breadcrumbs)
/* harmony export */ });
/* harmony import */ var _core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-cf426fab.js */ 98545);
/* harmony import */ var _commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonComponentFeatures-b771e888.js */ 27345);



const Breadcrumbs = class {
    constructor(hostRef) {
        (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.breadcrumbs = [];
        /**
         * The design version of the framework
         */
        this.designVersion = null;
        /**
         * Specifies whether component should render from right to left
         */
        this.rtl = false;
        /**
         * Specify the breadcrumb aria-label
         */
        this.ariaLabelNav = 'Breadcrumb';
        /**
         * Fetch the breadcrumbs list
         */
        this.fetchBreadcrumbs = () => {
            this.breadcrumbs = Array.from(this.host.getElementsByTagName('cwc-breadcrumb'));
        };
        /**
         * Set the aria-current attribute to the last element of the breadcrumbs list
         */
        this.setAriaCurrent = () => {
            const lastElem = this.breadcrumbs[this.breadcrumbs.length - 1];
            lastElem && lastElem.setAttribute('aria-current', 'page');
        };
        /**
         * Register listener on event when breadcrumbs are changed
         */
        this.registerSlotChangeHandler = () => {
            const breadcrumbsSlot = this.host.shadowRoot.querySelector('slot');
            breadcrumbsSlot.addEventListener('slotchange', this.handleSlotChange);
        };
        /**
         * In case of Slot change, refresh the breadcrumbs list
         */
        this.handleSlotChange = () => {
            this.fetchBreadcrumbs();
        };
    }
    componentWillLoad() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
    }
    componentDidLoad() {
        this.fetchBreadcrumbs();
        this.setAriaCurrent();
        this.registerSlotChangeHandler();
    }
    disconnectedCallback() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
    }
    render() {
        return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("nav", { class: `cwc-breadcrumbs ${this.designVersion}`, "aria-label": this.ariaLabelNav }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "list", class: "cwc-breadcrumbs__items" }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null))));
    }
    get host() { return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get style() { return "*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:inline-block}.cwc-breadcrumbs{font-size:1rem;padding:0;margin:0}.cwc-breadcrumbs__items{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}.v2.cwc-breadcrumbs{font-size:.75rem}"; }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_cmx-web-components_core_dist_esm_cwc-breadcrumbs_entry_js.js.map