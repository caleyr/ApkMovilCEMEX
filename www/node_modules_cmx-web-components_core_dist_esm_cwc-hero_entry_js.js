"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_cmx-web-components_core_dist_esm_cwc-hero_entry_js"],{

/***/ 27345:
/*!********************************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ destroyBasics),
/* harmony export */   "i": () => (/* binding */ initBasics)
/* harmony export */ });
function InitializeDirectionDetection(hostElement) {
    // the function that sets the dir in the shadow dom
    function executeDir(dir) {
        const shadowKids = hostElement.shadowRoot.childNodes;
        shadowKids.forEach(element => {
            element.setAttribute('dir', dir);
        });
    }
    function intervalHandler() {
        const actualDir = hostElement.dataset.dir;
        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');
        if (dir !== actualDir) {
            hostElement.dataset.dir = dir;
            hostElement.shadowRoot && executeDir(dir);
            if (dir === 'rtl') {
                return hostElement.setAttribute('rtl', 'true');
            }
            return hostElement.removeAttribute('rtl');
        }
    }
    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);
}
function DestroyDirectionDetection(hostElement) {
    if (hostElement && hostElement['rtlInterval']) {
        clearInterval(hostElement['rtlInterval']);
    }
}

function setDesignVersion() {
    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');
    return frameworkVersion ? frameworkVersion : 'v1';
}

function initBasics(componentClass) {
    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());
    if (!componentClass.rtl) {
        componentClass.host && InitializeDirectionDetection(componentClass.host);
    }
}
function destroyBasics(componentClass) {
    DestroyDirectionDetection(componentClass.host);
}




/***/ }),

/***/ 92663:
/*!**************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/cwc-hero.entry.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cwc_hero": () => (/* binding */ Hero)
/* harmony export */ });
/* harmony import */ var _core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-cf426fab.js */ 98545);
/* harmony import */ var _commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonComponentFeatures-b771e888.js */ 27345);



const Hero = class {
    constructor(hostRef) {
        (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.indicators = [];
        /**
         * The design version of the framework
         */
        this.designVersion = null;
        /**
         * Variant is used to get a different style for the element
         */
        this.variant = 'simple';
        /**
         * Scheme is used to get a different background brightness
         */
        this.scheme = 'dark';
        /**
         * Size of component
         */
        this.size = 'medium';
        /**
         * Style of carousel arrow
         */
        this.arrowStyle = 'straight';
        /**
         * Icon color.
         */
        this.buttonsColor = 'default';
        /**
         * Specify whether component should render from right to left.
         */
        this.rtl = false;
        /**
         * If true slides will change automatically
         */
        this.autoSlide = true;
        /**
         * Time after slides will change
         */
        this.autoSlideTimeout = 5000;
        /**
         * Returns next slide in order
         */
        this.getNextSlide = () => {
            if (this.currentSlide.getAttribute('index') === `${this.slidesNum - 1}`) {
                return this.slides[0];
            }
            else {
                return this.currentSlide.nextElementSibling;
            }
        };
        /**
         * Returns previous slide in order
         */
        this.getPreviousSlide = () => {
            if (this.currentSlide.getAttribute('index') === `${0}`) {
                return (this.previousSlide = this.slides[this.slidesNum - 1]);
            }
            else {
                if (this.slides.length < 3) {
                    const clone = this.currentSlide.cloneNode(true);
                    return clone;
                }
                else {
                    return this.currentSlide.previousElementSibling;
                }
            }
        };
    }
    autoSlideHandler(newValue) {
        if (newValue === false) {
            clearInterval(this.timer);
        }
        else {
            this.setTimer();
        }
    }
    componentWillLoad() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
        this.host.querySelector('cwc-hero-slide').classList.add('current-slide');
    }
    disconnectedCallback() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
    }
    componentWillRender() {
        this.slides = this.host.querySelectorAll('cwc-hero-slide');
        this.indicatorsNode = this.host.shadowRoot.querySelectorAll('.cwc-hero__carousel-indicator');
        this.onSlotChange();
        this.defineSlides();
        if (this.variant === 'carousel') {
            this.arrangeSlides();
        }
        this.passPropsToChildren();
    }
    componentDidRender() {
        this.slides = this.host.querySelectorAll('cwc-hero-slide');
        this.indicatorsNode = this.host.shadowRoot.querySelectorAll('.cwc-hero__carousel-indicator');
        if (this.variant === 'carousel') {
            // Handles indicator click
            this.indicatorChange();
            for (let i = 0; i < this.slidesNum; i++) {
                this.indicatorsNode[i].addEventListener('click', () => {
                    this.host.querySelector('.current-slide').classList.remove('current-slide');
                    this.slides[i].classList.add('current-slide');
                    this.defineSlides();
                    this.arrangeSlides();
                    this.indicatorChange();
                });
            }
            // Autoslide function
            if (this.autoSlide) {
                this.setTimer();
                this.host.addEventListener('mouseenter', () => {
                    clearInterval(this.timer);
                });
                this.host.addEventListener('mouseleave', () => {
                    this.setTimer();
                });
            }
            // Initial slide arrangement
            this.defineSlides();
            if (this.variant === 'carousel') {
                this.arrangeSlides();
            }
            // Add an event listener to check on how many slides are there and turn into 'simple' variant if there's only one
            const slot = this.host.shadowRoot.querySelector('slot');
            slot.addEventListener('slotchange', this.onSlotChange);
        }
    }
    /**
     * Pass props to children elements
     */
    passPropsToChildren() {
        this.slides.forEach(item => {
            item['variant'] = this.variant;
            item['scheme'] = this.scheme;
            item['size'] = this.size;
        });
    }
    /**
     * Changes variant to sipmle if there is only one slide and reassings index numbers if there is a change in numbers of slides
     */
    onSlotChange() {
        this.slidesNum = this.slides.length;
        if (this.slidesNum === 1) {
            this.variant = 'simple';
        }
        this.assingIndex();
    }
    /**
     * Defines what is the order of slides
     */
    defineSlides() {
        this.currentSlide = this.host.querySelector('.current-slide');
        if (this.rtl) {
            this.nextSlide = this.getPreviousSlide();
            this.previousSlide = this.getNextSlide();
        }
        else {
            this.nextSlide = this.getNextSlide();
            this.previousSlide = this.getPreviousSlide();
        }
    }
    /**
     * Arranges slides in right order
     */
    arrangeSlides() {
        const slideWidth = this.currentSlide.getBoundingClientRect().width;
        this.currentSlide.style.transform = 'translateX(0px)';
        this.nextSlide.style.transform = 'translateX(' + slideWidth.toString() + 'px)';
        this.previousSlide.style.transform = 'translateX(-' + slideWidth.toString() + 'px)';
    }
    /**
     * Assings position index numbers to all slides
     */
    assingIndex() {
        const arr = Array.from(this.slides);
        arr.forEach((item, index) => {
            item.setAttribute('index', `${index}`);
        });
    }
    /**
     * Handles control buttons click
     */
    buttonClick(direction) {
        this.host.querySelector('.current-slide').classList.remove('current-slide');
        if (direction === 'previous' && this.slides.length > 2) {
            this.previousSlide.classList.add('current-slide');
        }
        else {
            this.nextSlide.classList.add('current-slide');
        }
        this.defineSlides();
        this.arrangeSlides();
        this.indicatorChange();
        if (this.autoSlide) {
            this.setTimer();
        }
    }
    /**
     * Changes active indicator
     */
    indicatorChange() {
        const slideIndex = Array.from(this.slides)
            .map(element => element.classList.contains('current-slide'))
            .indexOf(true);
        Array.from(this.indicatorsNode).map(element => element.classList.remove('current-indicator'));
        this.indicatorsNode[slideIndex].classList.add('current-indicator');
    }
    /**
     * Changes slides after timeout
     */
    setTimer() {
        clearInterval(this.timer);
        this.timer = setInterval(() => {
            this.rtl ? this.buttonClick('previous') : this.buttonClick('next');
        }, this.autoSlideTimeout);
    }
    render() {
        // Renders correct number of indicators
        if (this.indicators.length !== this.slides.length) {
            for (let i = 0; i < this.slidesNum; i++) {
                this.indicators.push((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: 'cwc-hero__carousel-indicator ' +
                        (this.scheme === 'dark'
                            ? ' cwc-hero__carousel-indicator--dark'
                            : ' cwc-hero__carousel-indicator--bright') +
                        (' cwc-hero__carousel-indicator--' + this.buttonsColor) }));
            }
        }
        return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)(_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: `${this.designVersion}` }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null), this.variant === 'carousel' && ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { onClick: () => this.buttonClick('previous'), class: 'cwc-hero__carousel-button cwc-hero__carousel-button--prev' +
                (this.scheme === 'dark' ? ' cwc-hero__carousel-button--dark' : ' cwc-hero__carousel-button--bright') +
                (' cwc-hero__carousel-button--' + this.buttonsColor) }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-icon", { designVersion: this.designVersion, name: this.arrowStyle === 'straight' ? 'arrow-left-straight' : 'arrow-left-rounded-fill' }))), this.variant === 'carousel' && ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { onClick: () => this.buttonClick('next'), class: 'cwc-hero__carousel-button cwc-hero__carousel-button--next' +
                (this.scheme === 'dark' ? ' cwc-hero__carousel-button--dark' : ' cwc-hero__carousel-button--bright') +
                (' cwc-hero__carousel-button--' + this.buttonsColor) }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-icon", { designVersion: this.designVersion, name: this.arrowStyle === 'straight' ? 'arrow-right-straight' : 'arrow-right-rounded-fill' }))), this.variant === 'carousel' && (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cwc-hero__carousel-indicators" }, this.indicators)));
    }
    get host() { return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "autoSlide": ["autoSlideHandler"]
    }; }
    static get style() { return "*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden}.cwc-hero__slide{display:block;width:100%;min-width:100%;height:100%;background-position:50%;background-size:cover;color:#fff;font-weight:300;background-color:var(--cwc-hero-slide-background-color,var(--cwc-color-ui-primary-darkest,#001b3a))}.cwc-hero__slide--carousel{height:auto;position:absolute;top:0;bottom:0}.cwc-hero__slide--bright{background-color:var(--cwc-hero-slide-bright-background-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)));color:var(--cwc-hero-slide-bright-color,var(--cwc-color-grayscale-black-alpha-eighty,rgba(0,0,0,.8)))}.cwc-hero__slide--bright .cwc-hero__content{background-color:var(--cwc-hero-slide-bright-content-background-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)))}.cwc-hero__slide--dark .cwc-hero__content{background-color:var(--cwc-hero-slide-dark-content-background-color,var(--cwc-color-grayscale-black-alpha-fifty,rgba(0,0,0,.5)))}.cwc-hero__slide h2{font-weight:300}.cwc-hero__content{padding:2.75rem 7.625rem}.cwc-hero__carousel-button{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);border:0;background:transparent;font-size:1.5rem;padding:0;cursor:pointer;color:var(--cwc-hero-carousel-button-color,hsla(0,0%,100%,.5));z-index:100}.cwc-hero__carousel-button--prev{left:.5rem}.cwc-hero__carousel-button--next{right:.5rem}.cwc-hero__carousel-button:hover{color:var(--cwc-hero-carousel-button-hover-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)))}.cwc-hero__carousel-button:focus{outline:none}.cwc-hero__carousel-button--bright{color:var(--cwc-hero-carousel-button-bright-color,var(--cwc-color-grayscale-black-alpha-fifty,rgba(0,0,0,.5)))}.cwc-hero__carousel-button--bright:hover{color:var(--cwc-hero-carousel-button-bright-hover-color,var(--cwc-color-grayscale-black-alpha-eighty,rgba(0,0,0,.8)))}.cwc-hero__carousel-button--true-blue{color:var(--cwc-color-ui-primary,#003876)}.cwc-hero__carousel-button--true-blue:hover{color:var(--cwc-color-ui-primary-darkest-alpha-eighty,rgba(0,27,58,.8))}.cwc-hero__carousel-indicators{position:absolute;bottom:.5rem;width:100%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;z-index:100}.cwc-hero__carousel-indicator{background:hsla(0,0%,100%,.5);width:1.5rem;height:.25rem;border:none;border-radius:.125rem;margin:0 .125rem;padding:0;cursor:pointer}.cwc-hero__carousel-indicator:focus{outline:none}.cwc-hero__carousel-indicator.current-indicator{background:var(--cwc-hero-carousel-current-indicator-background-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)))}.cwc-hero__carousel-indicator--bright{background:var(--cwc-hero-carousel-indicator-bright-background-color,var(--cwc-color-grayscale-black-alpha-fifty,rgba(0,0,0,.5)))}.cwc-hero__carousel-indicator--bright.current-indicator{background:var(--cwc-hero-carousel-current-indicator-bright-background-color,var(--cwc-color-grayscale-black-alpha-eighty,rgba(0,0,0,.8)))}.cwc-hero__carousel-indicator--true-blue{background-color:var(--cwc-color-ui-primary,#003876)!important;opacity:.6}.cwc-hero__carousel-indicator--true-blue.current-indicator{opacity:1}\@media (max-width:767px){.cwc-hero__content{padding:2.25rem 2.75rem}}"; }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_cmx-web-components_core_dist_esm_cwc-hero_entry_js.js.map