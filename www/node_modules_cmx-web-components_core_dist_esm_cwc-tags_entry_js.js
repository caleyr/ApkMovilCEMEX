"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_cmx-web-components_core_dist_esm_cwc-tags_entry_js"],{

/***/ 27345:
/*!********************************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ destroyBasics),
/* harmony export */   "i": () => (/* binding */ initBasics)
/* harmony export */ });
function InitializeDirectionDetection(hostElement) {
    // the function that sets the dir in the shadow dom
    function executeDir(dir) {
        const shadowKids = hostElement.shadowRoot.childNodes;
        shadowKids.forEach(element => {
            element.setAttribute('dir', dir);
        });
    }
    function intervalHandler() {
        const actualDir = hostElement.dataset.dir;
        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');
        if (dir !== actualDir) {
            hostElement.dataset.dir = dir;
            hostElement.shadowRoot && executeDir(dir);
            if (dir === 'rtl') {
                return hostElement.setAttribute('rtl', 'true');
            }
            return hostElement.removeAttribute('rtl');
        }
    }
    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);
}
function DestroyDirectionDetection(hostElement) {
    if (hostElement && hostElement['rtlInterval']) {
        clearInterval(hostElement['rtlInterval']);
    }
}

function setDesignVersion() {
    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');
    return frameworkVersion ? frameworkVersion : 'v1';
}

function initBasics(componentClass) {
    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());
    if (!componentClass.rtl) {
        componentClass.host && InitializeDirectionDetection(componentClass.host);
    }
}
function destroyBasics(componentClass) {
    DestroyDirectionDetection(componentClass.host);
}




/***/ }),

/***/ 37733:
/*!**************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/cwc-tags.entry.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cwc_tags": () => (/* binding */ CwcTag)
/* harmony export */ });
/* harmony import */ var _core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-cf426fab.js */ 98545);
/* harmony import */ var _commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonComponentFeatures-b771e888.js */ 27345);



const CwcTag = class {
    constructor(hostRef) {
        (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        /**
         * The design version of the framework
         */
        this.designVersion = null;
        /**
         * Variant is used to get a different style for the element
         */
        this.variant = 'regular';
        /**
         * If true tag can be closed
         */
        this.allowClose = false;
        /**
         * Specify whether component should render from right to left
         */
        this.rtl = false;
        /**
         * If tags can be selected
         */
        this.selectable = false;
        /**
         * Pass props to children elements
         */
        this.passPropsToChildren = () => {
            this.tags = this.host.querySelectorAll('cwc-tag');
            this.tags.forEach(item => {
                item['variant'] = this.variant;
                item['allowClose'] = this.allowClose;
                item['rtl'] = this.rtl;
                item['selectable'] = this.selectable;
            });
        };
    }
    setSelectable(selectable) {
        this.tags.forEach(item => {
            item['selectable'] = selectable;
        });
    }
    setVariant(variant) {
        this.tags.forEach(item => {
            item['variant'] = variant;
        });
    }
    setAllowClose(allowClose) {
        this.tags.forEach(item => {
            item['allowClose'] = allowClose;
        });
    }
    setRtl(rtl) {
        this.tags.forEach(item => {
            item['rtl'] = rtl;
        });
    }
    componentWillLoad() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
    }
    /**
     * Call when component did load (lifecycle)
     */
    componentDidLoad() {
        this.registerSlotChangeHandler();
        this.passPropsToChildren();
    }
    disconnectedCallback() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
    }
    /**
     * Register listener on event when tags are changed
     */
    registerSlotChangeHandler() {
        const optionsSlot = this.host.shadowRoot.querySelector('slot');
        optionsSlot.addEventListener('slotchange', () => {
            this.passPropsToChildren();
        });
    }
    render() {
        return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: this.designVersion }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
    }
    get host() { return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "selectable": ["setSelectable"],
        "variant": ["setVariant"],
        "allowClose": ["setAllowClose"],
        "rtl": ["setRtl"]
    }; }
    static get style() { return "*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:inline-block}"; }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_cmx-web-components_core_dist_esm_cwc-tags_entry_js.js.map