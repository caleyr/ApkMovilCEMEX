"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_cmx-web-components_core_dist_esm_cwc-avatar_entry_js"],{

/***/ 27345:
/*!********************************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ destroyBasics),
/* harmony export */   "i": () => (/* binding */ initBasics)
/* harmony export */ });
function InitializeDirectionDetection(hostElement) {
    // the function that sets the dir in the shadow dom
    function executeDir(dir) {
        const shadowKids = hostElement.shadowRoot.childNodes;
        shadowKids.forEach(element => {
            element.setAttribute('dir', dir);
        });
    }
    function intervalHandler() {
        const actualDir = hostElement.dataset.dir;
        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');
        if (dir !== actualDir) {
            hostElement.dataset.dir = dir;
            hostElement.shadowRoot && executeDir(dir);
            if (dir === 'rtl') {
                return hostElement.setAttribute('rtl', 'true');
            }
            return hostElement.removeAttribute('rtl');
        }
    }
    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);
}
function DestroyDirectionDetection(hostElement) {
    if (hostElement && hostElement['rtlInterval']) {
        clearInterval(hostElement['rtlInterval']);
    }
}

function setDesignVersion() {
    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');
    return frameworkVersion ? frameworkVersion : 'v1';
}

function initBasics(componentClass) {
    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());
    if (!componentClass.rtl) {
        componentClass.host && InitializeDirectionDetection(componentClass.host);
    }
}
function destroyBasics(componentClass) {
    DestroyDirectionDetection(componentClass.host);
}




/***/ }),

/***/ 28456:
/*!****************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/cwc-avatar.entry.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cwc_avatar": () => (/* binding */ Avatar)
/* harmony export */ });
/* harmony import */ var _core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-cf426fab.js */ 98545);
/* harmony import */ var _commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonComponentFeatures-b771e888.js */ 27345);



const Avatar = class {
    constructor(hostRef) {
        (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        /**
         * The design version of the framework
         */
        this.designVersion = null;
        /**
         * Variant is used to get a different style for the element
         */
        this.variant = 'positive';
        /**
         * Two different sizes of the avatar
         */
        this.size = 'regular';
        // It creates two letters string from 'name' property
        this.getInitials = fullName => {
            const names = fullName.split(' ');
            const initials = names.map(element => element.split('')[0].toUpperCase());
            // when there are more than 3 names, it takes first letter from first and third name
            if (initials.length >= 4) {
                this.initials = initials[0] + initials[2];
            }
            else if (initials.length > 1 && initials.length < 4) {
                this.initials = initials[0] + initials[initials.length - 1];
            }
            else {
                this.initials = initials[0];
            }
        };
        // Fallback to initials variant when invalid source path inserted
        this.invalidPath = () => {
            this.imageSource = null;
        };
    }
    validateSourcePath() {
        this.imageElement.onerror = () => {
            this.imageSource = null;
        };
    }
    createInitials() {
        this.getInitials(this.name);
    }
    componentWillLoad() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
    }
    disconnectedCallback() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
    }
    componentWillRender() {
        this.getInitials(this.name);
    }
    render() {
        return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)(_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: `cwc-avatar ${this.designVersion} ${this.variant === 'negative' ? 'cwc-avatar--inverted' : ''} ${this.size === 'small' ? ' cwc-avatar--small' : ''}` }, this.imageSource ? ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { class: "cwc-avatar__image", ref: el => (this.imageElement = el), src: this.imageSource, alt: this.name, onError: this.invalidPath })) : ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cwc-avatar__initials" }, this.initials))));
    }
    get host() { return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "imageSource": ["validateSourcePath"],
        "name": ["createInitials"]
    }; }
    static get style() { return "*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host(.cwc-avatar){width:60px;height:60px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;color:var(--cwc-avatar-color,var(--cwc-color-ui-primary,#003876));background-color:var(--cwc-avatar-background-color,var(--cwc-color-grayscale-white,#fff));border-radius:50%;font-size:1.75rem;font-weight:700}:host(.cwc-avatar--inverted){color:var(--cwc-avatar-inverted-color,var(--cwc-color-grayscale-white,#fff));background-color:var(--cwc-avatar-inverted-background-color,var(--cwc-color-ui-primary,#003876))}:host(.cwc-avatar--small){width:32px;height:32px;font-size:.875rem}.cwc-avatar__image{-webkit-clip-path:circle(50% at center);clip-path:circle(50% at center);width:100%;height:100%;-o-object-fit:cover;object-fit:cover}.cwc-avatar__initials{text-transform:uppercase}"; }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_cmx-web-components_core_dist_esm_cwc-avatar_entry_js.js.map