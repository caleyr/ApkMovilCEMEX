{"version":3,"file":"node_modules_cmx-web-components_core_dist_esm_cwc-cell_entry_js.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+C;;;;;;;;;;;;;;;;;AC3C2C;AACE;;AAE5F;AACA;AACA,QAAQ,oDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA,QAAQ,uEAAa;AACrB;AACA;AACA,gBAAgB,oDAAC,CAAC,gDAAI,IAAI,2BAA2B,EAAE,oDAAC,YAAY,oCAAoC,2BAA2B,oDAAC;AACpI;AACA,iBAAiB,OAAO,oDAAU;AAClC,yBAAyB,UAAU,mCAAmC,kCAAkC,MAAM,aAAa,0BAA0B,uBAAuB,KAAK,cAAc;AAC/L;;AAE6B","sources":["./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js","./node_modules/@cmx-web-components/core/dist/esm/cwc-cell.entry.js"],"sourcesContent":["function InitializeDirectionDetection(hostElement) {\r\n    // the function that sets the dir in the shadow dom\r\n    function executeDir(dir) {\r\n        const shadowKids = hostElement.shadowRoot.childNodes;\r\n        shadowKids.forEach(element => {\r\n            element.setAttribute('dir', dir);\r\n        });\r\n    }\r\n    function intervalHandler() {\r\n        const actualDir = hostElement.dataset.dir;\r\n        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');\r\n        if (dir !== actualDir) {\r\n            hostElement.dataset.dir = dir;\r\n            hostElement.shadowRoot && executeDir(dir);\r\n            if (dir === 'rtl') {\r\n                return hostElement.setAttribute('rtl', 'true');\r\n            }\r\n            return hostElement.removeAttribute('rtl');\r\n        }\r\n    }\r\n    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);\r\n}\r\nfunction DestroyDirectionDetection(hostElement) {\r\n    if (hostElement && hostElement['rtlInterval']) {\r\n        clearInterval(hostElement['rtlInterval']);\r\n    }\r\n}\n\nfunction setDesignVersion() {\r\n    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');\r\n    return frameworkVersion ? frameworkVersion : 'v1';\r\n}\n\nfunction initBasics(componentClass) {\r\n    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());\r\n    if (!componentClass.rtl) {\r\n        componentClass.host && InitializeDirectionDetection(componentClass.host);\r\n    }\r\n}\r\nfunction destroyBasics(componentClass) {\r\n    DestroyDirectionDetection(componentClass.host);\r\n}\n\nexport { destroyBasics as d, initBasics as i };\n","import { r as registerInstance, h, H as Host, g as getElement } from './core-cf426fab.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\n\nconst Table = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        // PROPS -------\n        /**\n         * The design version of the framework\n         */\n        this.designVersion = null;\n        /**\n         * Display text right-to-left if true\n         */\n        this.rtl = false;\n        /**\n         * Number of column where the cell starts\n         */\n        this.colstart = 'auto';\n        /**\n         * Number of columns that the cell will span\n         */\n        this.colspan = 1;\n        /**\n         * Number of row where the cell starts\n         */\n        this.rowstart = 'auto';\n        /**\n         * Number of rows that the cell will span\n         */\n        this.rowspan = 1;\n        // mobile props\n        /**\n         * Number of column where the cell starts\n         */\n        this.mobileColstart = this.colstart;\n        /**\n         * Number of columns that the cell will span on mobile\n         */\n        this.mobileColspan = this.colspan;\n        /**\n         * Number of row where the cell starts on mobile\n         */\n        this.mobileRowstart = this.rowstart;\n        /**\n         * Number of rows that the cell will span on mobile\n         */\n        this.mobileRowspan = this.rowspan;\n        // alignment props\n        /**\n         * Vertical Alignent of the contents\n         */\n        this.alignItems = 'inherit';\n        /**\n         * Horizontal justification of the contents\n         */\n        this.justifyItems = 'inherit';\n        // METHODS ------\n        this.renderCellStyle = () => {\n            const styles = `\n  :host{\n    grid-column-start: ` +\n                this.colstart +\n                `;\n    grid-column-end: span ` +\n                this.colspan +\n                `;\n    grid-row-start: ` +\n                this.rowstart +\n                `;\n    grid-row-end: span ` +\n                this.rowspan +\n                `;\n    align-items: ` +\n                this.alignItems +\n                `;\n    justify-items: ` +\n                this.justifyItems +\n                `;\n  }\n  @media (max-width: 767px) {\n    :host{\n      grid-column-start: ` +\n                this.mobileColstart +\n                `;\n      grid-column-end: span ` +\n                this.mobileColspan +\n                `;\n      grid-row-start: ` +\n                this.mobileRowstart +\n                `;\n      grid-row-end: span ` +\n                this.mobileRowspan +\n                `;\n    }\n  }\n  `;\n            return styles;\n        };\n    }\n    componentWillLoad() {\n        initBasics(this);\n    }\n    disconnectedCallback() {\n        destroyBasics(this);\n    }\n    render() {\n        return (h(Host, { class: this.designVersion }, h(\"style\", { id: \"cellStyles\", type: \"text/css\" }, this.renderCellStyle()), h(\"slot\", null)));\n    }\n    get host() { return getElement(this); }\n    static get style() { return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:grid;grid-template-columns:1fr;grid-template-rows:1fr}slot{display:block}\"; }\n};\n\nexport { Table as cwc_cell };\n"],"names":[],"sourceRoot":"webpack:///"}