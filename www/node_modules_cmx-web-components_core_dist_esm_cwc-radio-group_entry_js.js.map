{"version":3,"file":"node_modules_cmx-web-components_core_dist_esm_cwc-radio-group_entry_js.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+C;;;;;;;;;;;;;;;;;AC3CkD;AACL;;AAE5F;AACA;AACA,QAAQ,oDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA,QAAQ,uEAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oDAAC,UAAU,0BAA0B,mBAAmB,GAAG,EAAE,oDAAC;AACnG,sDAAsD,oDAAC,qBAAqB,iIAAiI,eAAe,qCAAqC;AACjQ;AACA,iBAAiB,OAAO,oDAAU;AAClC,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU,mCAAmC,kCAAkC,MAAM,qBAAqB;AACnI;;AAE4C","sources":["./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js","./node_modules/@cmx-web-components/core/dist/esm/cwc-radio-group.entry.js"],"sourcesContent":["function InitializeDirectionDetection(hostElement) {\r\n    // the function that sets the dir in the shadow dom\r\n    function executeDir(dir) {\r\n        const shadowKids = hostElement.shadowRoot.childNodes;\r\n        shadowKids.forEach(element => {\r\n            element.setAttribute('dir', dir);\r\n        });\r\n    }\r\n    function intervalHandler() {\r\n        const actualDir = hostElement.dataset.dir;\r\n        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');\r\n        if (dir !== actualDir) {\r\n            hostElement.dataset.dir = dir;\r\n            hostElement.shadowRoot && executeDir(dir);\r\n            if (dir === 'rtl') {\r\n                return hostElement.setAttribute('rtl', 'true');\r\n            }\r\n            return hostElement.removeAttribute('rtl');\r\n        }\r\n    }\r\n    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);\r\n}\r\nfunction DestroyDirectionDetection(hostElement) {\r\n    if (hostElement && hostElement['rtlInterval']) {\r\n        clearInterval(hostElement['rtlInterval']);\r\n    }\r\n}\n\nfunction setDesignVersion() {\r\n    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');\r\n    return frameworkVersion ? frameworkVersion : 'v1';\r\n}\n\nfunction initBasics(componentClass) {\r\n    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());\r\n    if (!componentClass.rtl) {\r\n        componentClass.host && InitializeDirectionDetection(componentClass.host);\r\n    }\r\n}\r\nfunction destroyBasics(componentClass) {\r\n    DestroyDirectionDetection(componentClass.host);\r\n}\n\nexport { destroyBasics as d, initBasics as i };\n","import { r as registerInstance, c as createEvent, h, g as getElement } from './core-cf426fab.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\n\nconst CwcRadioGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The design version of the framework\n         */\n        this.designVersion = null;\n        /**\n         * When set to true the element is required and the label is decorated with an asterisk (*)\n         */\n        this.required = false;\n        /**\n         * Status of the form field.\n         */\n        this.status = 'regular';\n        /**\n         * When set to true the element is disabled\n         */\n        this.disabled = false;\n        /**\n         * Specify whether component should render from right to left\n         */\n        this.rtl = false;\n        /**\n         * When set to true the component doesn't render form-group wrapper\n         */\n        this.unwrap = false;\n        this.changeEvent = createEvent(this, \"cwcChange\", 7);\n    }\n    /**\n     * Call when component did load (lifecycle)\n     */\n    componentDidLoad() {\n        this.initAttributes();\n    }\n    componentWillLoad() {\n        initBasics(this);\n    }\n    disconnectedCallback() {\n        destroyBasics(this);\n    }\n    /**\n     * Initialize attributes & add event listener on slot change\n     */\n    initAttributes() {\n        this.radios = this.host.querySelectorAll('cwc-radio');\n        this.radios.forEach(item => {\n            if (this.value) {\n                item['checked'] = item['value'] === this.value;\n            }\n            item['disabled'] = this.disabled;\n            item['name'] = this.name;\n            item['status'] = this.status;\n            item['rtl'] = this.rtl;\n        });\n        this.registerSlotChangeHandler();\n    }\n    /**\n     * Register listener on event when radio are changed\n     */\n    registerSlotChangeHandler() {\n        const optionsSlot = this.host.shadowRoot.querySelector('slot');\n        optionsSlot.addEventListener('slotchange', () => {\n            this.radios = this.host.querySelectorAll('cwc-radio');\n        });\n    }\n    /**\n     * Method called on disabled changes\n     */\n    setDisabled(disabled) {\n        this.radios.forEach(item => {\n            item['disabled'] = disabled;\n        });\n    }\n    /**\n     * Method called on error changes\n     */\n    setError(error) {\n        this.radios.forEach(item => {\n            item['error'] = error !== null && error !== '';\n        });\n    }\n    /**\n     * Method called on rtl changes\n     */\n    setRtl(rtl) {\n        this.radios.forEach(item => {\n            item['rtl'] = rtl;\n        });\n    }\n    /**\n     * Method called on value changes\n     */\n    setValue(newValue, oldValue) {\n        if (oldValue !== newValue) {\n            this.radios.forEach(item => {\n                item['checked'] = item['value'] === newValue;\n            });\n        }\n    }\n    /**\n     * Method called on status changes, passing status on children elements\n     */\n    setStatus(newValue, oldValue) {\n        if (oldValue !== newValue) {\n            this.radios.forEach(item => {\n                item['status'] = newValue;\n            });\n        }\n    }\n    /**\n     * Triggered when radio is changed. Event emitted in cwc-radio\n     * @param event Event details\n     */\n    updateChecked(event) {\n        event.stopPropagation();\n        if (this.disabled) {\n            return;\n        }\n        this.value = event.detail;\n        this.changeEvent.emit(this.value);\n        this.radios.forEach(item => {\n            item['checked'] = item['value'] === this.value;\n        });\n    }\n    /**\n     * Triggered when some key pressed which focused on radio\n     * @param event Custom event with the key pressed\n     */\n    keyboardChecked(event) {\n        const values = [];\n        this.radios.forEach(radio => values.push(radio.value));\n        this.itemIndex = values.indexOf(this.value);\n        if (['ArrowUp', 'ArrowLeft'].includes(event.detail)) {\n            this.checkPrevRadio();\n        }\n        else if (['ArrowDown', 'ArrowRight'].includes(event.detail)) {\n            this.checkNextRadio();\n        }\n        this.initAttributes();\n    }\n    checkPrevRadio() {\n        if (this.itemIndex !== -1 && this.itemIndex !== 0) {\n            this.value = this.itemIndex;\n        }\n    }\n    checkNextRadio() {\n        if (this.itemIndex !== -1 && this.radios.length - 1 > this.itemIndex) {\n            this.value = this.itemIndex + 2;\n        }\n    }\n    render() {\n        const radioGroupComponent = (h(\"div\", { class: `cwc-radio-group ${this.designVersion}` }, h(\"slot\", null)));\n        return this.unwrap ? (radioGroupComponent) : (h(\"cwc-form-group\", { role: \"radiogroup\", label: this.label, required: this.required, status: this.status, statusMessage: this.statusMessage, style: { width: '100%' }, designVersion: this.designVersion }, radioGroupComponent));\n    }\n    get host() { return getElement(this); }\n    static get watchers() { return {\n        \"disabled\": [\"setDisabled\"],\n        \"error\": [\"setError\"],\n        \"rtl\": [\"setRtl\"],\n        \"value\": [\"setValue\"],\n        \"status\": [\"setStatus\"]\n    }; }\n    static get style() { return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:inline-block}\"; }\n};\n\nexport { CwcRadioGroup as cwc_radio_group };\n"],"names":[],"sourceRoot":"webpack:///"}