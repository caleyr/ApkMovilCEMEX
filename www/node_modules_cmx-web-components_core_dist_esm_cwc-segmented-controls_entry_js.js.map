{"version":3,"file":"node_modules_cmx-web-components_core_dist_esm_cwc-segmented-controls_entry_js.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+C;;;;;;;;;;;;;;;;;AC3C2C;AACE;;AAE5F;AACA;AACA,QAAQ,oDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qCAAqC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yCAAyC;AACrE;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAa;AACrB;AACA;AACA,gBAAgB,oDAAC,CAAC,gDAAI,QAAQ,oDAAC,UAAU,iCAAiC,mBAAmB,GAAG,EAAE,oDAAC;AACnG;AACA,iBAAiB,OAAO,oDAAU;AAClC,yBAAyB,UAAU,mCAAmC,kCAAkC,wBAAwB,2BAA2B,oBAAoB,qBAAqB,iBAAiB,kBAAkB,gBAAgB,2BAA2B,2GAA2G,mBAAmB,sGAAsG;AACtf;;AAEuD","sources":["./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js","./node_modules/@cmx-web-components/core/dist/esm/cwc-segmented-controls.entry.js"],"sourcesContent":["function InitializeDirectionDetection(hostElement) {\r\n    // the function that sets the dir in the shadow dom\r\n    function executeDir(dir) {\r\n        const shadowKids = hostElement.shadowRoot.childNodes;\r\n        shadowKids.forEach(element => {\r\n            element.setAttribute('dir', dir);\r\n        });\r\n    }\r\n    function intervalHandler() {\r\n        const actualDir = hostElement.dataset.dir;\r\n        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');\r\n        if (dir !== actualDir) {\r\n            hostElement.dataset.dir = dir;\r\n            hostElement.shadowRoot && executeDir(dir);\r\n            if (dir === 'rtl') {\r\n                return hostElement.setAttribute('rtl', 'true');\r\n            }\r\n            return hostElement.removeAttribute('rtl');\r\n        }\r\n    }\r\n    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);\r\n}\r\nfunction DestroyDirectionDetection(hostElement) {\r\n    if (hostElement && hostElement['rtlInterval']) {\r\n        clearInterval(hostElement['rtlInterval']);\r\n    }\r\n}\n\nfunction setDesignVersion() {\r\n    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');\r\n    return frameworkVersion ? frameworkVersion : 'v1';\r\n}\n\nfunction initBasics(componentClass) {\r\n    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());\r\n    if (!componentClass.rtl) {\r\n        componentClass.host && InitializeDirectionDetection(componentClass.host);\r\n    }\r\n}\r\nfunction destroyBasics(componentClass) {\r\n    DestroyDirectionDetection(componentClass.host);\r\n}\n\nexport { destroyBasics as d, initBasics as i };\n","import { r as registerInstance, h, H as Host, g as getElement } from './core-cf426fab.js';\nimport { i as initBasics, d as destroyBasics } from './commonComponentFeatures-b771e888.js';\n\nconst SegmentedControls = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The design version of the framework\n         */\n        this.designVersion = null;\n        /**\n         * Disables all controls\n         */\n        this.disabled = false;\n        /**\n         * Pass props to children elements\n         */\n        this.passPropsToChildren = () => {\n            this.controlsInOrder.forEach(item => {\n                if (this.disabled) {\n                    item['disabled'] = this.disabled;\n                }\n                item['designVersion'] = this.designVersion;\n            });\n        };\n    }\n    /**\n     * Provides the standard change-of-control work based on a click event.\n     * @param event carries the name and host element\n     */\n    controlClickedHandler(event) {\n        this.activeControl = event.detail.host;\n        for (let index = 0; index < this.controlsInOrder.length; index++) {\n            this.controlsInOrder[index].setAttribute('active', false);\n        }\n        this.activeControl.setAttribute('active', true);\n    }\n    sortControls() {\n        this.controlsInOrder = this.host.querySelectorAll('cwc-segmented-controls-item');\n        this.controlsInOrder[0].position = 'first';\n        this.controlsInOrder[this.controlsInOrder.length - 1].position = 'last';\n        for (let index = 1; index < this.controlsInOrder.length - 1; index++) {\n            this.controlsInOrder[index].position = 'middle';\n        }\n    }\n    componentWillLoad() {\n        this.sortControls();\n        initBasics(this);\n    }\n    componentWillRender() {\n        this.passPropsToChildren();\n    }\n    disconnectedCallback() {\n        destroyBasics(this);\n    }\n    render() {\n        return (h(Host, null, h(\"div\", { class: `cwc-segmented-controls ${this.designVersion}` }, h(\"slot\", null))));\n    }\n    get host() { return getElement(this); }\n    static get style() { return \"*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.cwc-segmented-controls{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-wrap:nowrap;flex-wrap:nowrap;overflow-y:hidden;overflow-x:auto}.cwc-segmented-controls.v2{border:1px solid var(--cwc-segmented-controls-border-color,var(--cwc-color-elements-input-border,#adaebb));border-radius:20px;background-color:var(--cwc-segmented-controls-background-color,var(--cwc-color-grayscale-white,#fff))}\"; }\n};\n\nexport { SegmentedControls as cwc_segmented_controls };\n"],"names":[],"sourceRoot":"webpack:///"}