"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_cmx-web-components_core_dist_esm_cwc-radio-group_entry_js"],{

/***/ 27345:
/*!********************************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ destroyBasics),
/* harmony export */   "i": () => (/* binding */ initBasics)
/* harmony export */ });
function InitializeDirectionDetection(hostElement) {
    // the function that sets the dir in the shadow dom
    function executeDir(dir) {
        const shadowKids = hostElement.shadowRoot.childNodes;
        shadowKids.forEach(element => {
            element.setAttribute('dir', dir);
        });
    }
    function intervalHandler() {
        const actualDir = hostElement.dataset.dir;
        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');
        if (dir !== actualDir) {
            hostElement.dataset.dir = dir;
            hostElement.shadowRoot && executeDir(dir);
            if (dir === 'rtl') {
                return hostElement.setAttribute('rtl', 'true');
            }
            return hostElement.removeAttribute('rtl');
        }
    }
    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);
}
function DestroyDirectionDetection(hostElement) {
    if (hostElement && hostElement['rtlInterval']) {
        clearInterval(hostElement['rtlInterval']);
    }
}

function setDesignVersion() {
    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');
    return frameworkVersion ? frameworkVersion : 'v1';
}

function initBasics(componentClass) {
    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());
    if (!componentClass.rtl) {
        componentClass.host && InitializeDirectionDetection(componentClass.host);
    }
}
function destroyBasics(componentClass) {
    DestroyDirectionDetection(componentClass.host);
}




/***/ }),

/***/ 19125:
/*!*********************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/cwc-radio-group.entry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cwc_radio_group": () => (/* binding */ CwcRadioGroup)
/* harmony export */ });
/* harmony import */ var _core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-cf426fab.js */ 98545);
/* harmony import */ var _commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonComponentFeatures-b771e888.js */ 27345);



const CwcRadioGroup = class {
    constructor(hostRef) {
        (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        /**
         * The design version of the framework
         */
        this.designVersion = null;
        /**
         * When set to true the element is required and the label is decorated with an asterisk (*)
         */
        this.required = false;
        /**
         * Status of the form field.
         */
        this.status = 'regular';
        /**
         * When set to true the element is disabled
         */
        this.disabled = false;
        /**
         * Specify whether component should render from right to left
         */
        this.rtl = false;
        /**
         * When set to true the component doesn't render form-group wrapper
         */
        this.unwrap = false;
        this.changeEvent = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcChange", 7);
    }
    /**
     * Call when component did load (lifecycle)
     */
    componentDidLoad() {
        this.initAttributes();
    }
    componentWillLoad() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
    }
    disconnectedCallback() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
    }
    /**
     * Initialize attributes & add event listener on slot change
     */
    initAttributes() {
        this.radios = this.host.querySelectorAll('cwc-radio');
        this.radios.forEach(item => {
            if (this.value) {
                item['checked'] = item['value'] === this.value;
            }
            item['disabled'] = this.disabled;
            item['name'] = this.name;
            item['status'] = this.status;
            item['rtl'] = this.rtl;
        });
        this.registerSlotChangeHandler();
    }
    /**
     * Register listener on event when radio are changed
     */
    registerSlotChangeHandler() {
        const optionsSlot = this.host.shadowRoot.querySelector('slot');
        optionsSlot.addEventListener('slotchange', () => {
            this.radios = this.host.querySelectorAll('cwc-radio');
        });
    }
    /**
     * Method called on disabled changes
     */
    setDisabled(disabled) {
        this.radios.forEach(item => {
            item['disabled'] = disabled;
        });
    }
    /**
     * Method called on error changes
     */
    setError(error) {
        this.radios.forEach(item => {
            item['error'] = error !== null && error !== '';
        });
    }
    /**
     * Method called on rtl changes
     */
    setRtl(rtl) {
        this.radios.forEach(item => {
            item['rtl'] = rtl;
        });
    }
    /**
     * Method called on value changes
     */
    setValue(newValue, oldValue) {
        if (oldValue !== newValue) {
            this.radios.forEach(item => {
                item['checked'] = item['value'] === newValue;
            });
        }
    }
    /**
     * Method called on status changes, passing status on children elements
     */
    setStatus(newValue, oldValue) {
        if (oldValue !== newValue) {
            this.radios.forEach(item => {
                item['status'] = newValue;
            });
        }
    }
    /**
     * Triggered when radio is changed. Event emitted in cwc-radio
     * @param event Event details
     */
    updateChecked(event) {
        event.stopPropagation();
        if (this.disabled) {
            return;
        }
        this.value = event.detail;
        this.changeEvent.emit(this.value);
        this.radios.forEach(item => {
            item['checked'] = item['value'] === this.value;
        });
    }
    /**
     * Triggered when some key pressed which focused on radio
     * @param event Custom event with the key pressed
     */
    keyboardChecked(event) {
        const values = [];
        this.radios.forEach(radio => values.push(radio.value));
        this.itemIndex = values.indexOf(this.value);
        if (['ArrowUp', 'ArrowLeft'].includes(event.detail)) {
            this.checkPrevRadio();
        }
        else if (['ArrowDown', 'ArrowRight'].includes(event.detail)) {
            this.checkNextRadio();
        }
        this.initAttributes();
    }
    checkPrevRadio() {
        if (this.itemIndex !== -1 && this.itemIndex !== 0) {
            this.value = this.itemIndex;
        }
    }
    checkNextRadio() {
        if (this.itemIndex !== -1 && this.radios.length - 1 > this.itemIndex) {
            this.value = this.itemIndex + 2;
        }
    }
    render() {
        const radioGroupComponent = ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `cwc-radio-group ${this.designVersion}` }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
        return this.unwrap ? (radioGroupComponent) : ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-form-group", { role: "radiogroup", label: this.label, required: this.required, status: this.status, statusMessage: this.statusMessage, style: { width: '100%' }, designVersion: this.designVersion }, radioGroupComponent));
    }
    get host() { return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "disabled": ["setDisabled"],
        "error": ["setError"],
        "rtl": ["setRtl"],
        "value": ["setValue"],
        "status": ["setStatus"]
    }; }
    static get style() { return "*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:inline-block}"; }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_cmx-web-components_core_dist_esm_cwc-radio-group_entry_js.js.map