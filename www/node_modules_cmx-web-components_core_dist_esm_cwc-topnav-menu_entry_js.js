"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_cmx-web-components_core_dist_esm_cwc-topnav-menu_entry_js"],{

/***/ 27345:
/*!********************************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/commonComponentFeatures-b771e888.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ destroyBasics),
/* harmony export */   "i": () => (/* binding */ initBasics)
/* harmony export */ });
function InitializeDirectionDetection(hostElement) {
    // the function that sets the dir in the shadow dom
    function executeDir(dir) {
        const shadowKids = hostElement.shadowRoot.childNodes;
        shadowKids.forEach(element => {
            element.setAttribute('dir', dir);
        });
    }
    function intervalHandler() {
        const actualDir = hostElement.dataset.dir;
        const dir = window.getComputedStyle(hostElement).getPropertyValue('direction');
        if (dir !== actualDir) {
            hostElement.dataset.dir = dir;
            hostElement.shadowRoot && executeDir(dir);
            if (dir === 'rtl') {
                return hostElement.setAttribute('rtl', 'true');
            }
            return hostElement.removeAttribute('rtl');
        }
    }
    hostElement['rtlInterval'] = setInterval(intervalHandler, 750);
}
function DestroyDirectionDetection(hostElement) {
    if (hostElement && hostElement['rtlInterval']) {
        clearInterval(hostElement['rtlInterval']);
    }
}

function setDesignVersion() {
    const frameworkVersion = getComputedStyle(document.documentElement).getPropertyValue('--cwc-version');
    return frameworkVersion ? frameworkVersion : 'v1';
}

function initBasics(componentClass) {
    !componentClass.designVersion && (componentClass.designVersion = setDesignVersion());
    if (!componentClass.rtl) {
        componentClass.host && InitializeDirectionDetection(componentClass.host);
    }
}
function destroyBasics(componentClass) {
    DestroyDirectionDetection(componentClass.host);
}




/***/ }),

/***/ 82694:
/*!*********************************************************************************!*\
  !*** ./node_modules/@cmx-web-components/core/dist/esm/cwc-topnav-menu.entry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cwc_topnav_menu": () => (/* binding */ TopnavMenu)
/* harmony export */ });
/* harmony import */ var _core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-cf426fab.js */ 98545);
/* harmony import */ var _commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonComponentFeatures-b771e888.js */ 27345);
/* harmony import */ var _helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-bb43a8d9.js */ 94326);




const breakpointAsMin = 767;
const TopnavMenu = class {
    constructor(hostRef) {
        (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        /**
         * The design version of the framework
         */
        this.designVersion = null;
        /**
         * Specify the variant (bright or dark) of the topnav
         */
        this.variant = 'negative';
        /**
         * Specify if it will render in rtl mode
         */
        this.rtl = false;
        /**
         * Specify the nav aria-label
         */
        this.ariaLabelNav = 'Main Menu';
        /**
         * Specify if in responsive menu will collapse into sidenav
         */
        this.collapsable = true;
        /**
         * Specify the nav aria-label
         */
        this.open = false;
        /**
         * Specify the width of the window to do responsive adaptation
         */
        this.windowWidth = null;
        /**
         * An array of menu items: CwcMenuItemType { label: string; active: boolean; href: string; target: string; children: CwcMenuItemType[]; clickFn: any; }
         */
        this.menu = [];
        /*
        // NOT IMPLEMENTED YET
        createMenu(menuItems: HTMLCollection) {
          function parseMenu(menuChildren: HTMLCollection): any {
            const output = [];
            Array.from(menuChildren).forEach((menuItem: HTMLElement) => {
              // let's check it is a menuItem
              if (menuItem.tagName === 'CWC-TOPNAV-MENU-ITEM') {
                // create a menu item element
                const menuObj: CwcMenuItemType = {
                  label: menuItem.getAttribute('label'),
                  active: menuItem.getAttribute('active') !== null ? true : false,
                  href: menuItem.getAttribute('href'),
                  target: menuItem.getAttribute('target'),
                  clickFn: () => {
                    return false;
                  },
                  children: [],
                };
      
                if (menuItem.children && (menuItem.children.length > 0)) {
                  menuObj.children = parseMenu(menuItem.children);
                }
      
                output.push(menuObj);
              }
            });
            return output;
          }
      
          const menu = parseMenu(menuItems);
          this.menu = menu;
        }
        */
        // this function reflects the change to the menu model
        this.findMenuitem = (haystack, needle) => {
            let found = false;
            haystack.forEach(item => {
                if (item === needle) {
                    item.active = true;
                    found = true;
                }
                else {
                    item.active = false;
                }
                if (item.children && item.children.length > 0) {
                    this.findMenuitem(item.children, needle) && (item.active = true);
                }
            });
            this.menu = [...this.menu];
            return found;
        };
        this.handleMenuClick = (e, menuItem, isSub) => {
            const href = menuItem.href;
            const target = menuItem.target;
            menuItem.clickFn && menuItem.clickFn();
            // reflect the click to the model
            this.findMenuitem(this.menu, menuItem);
            if (!isSub) {
                const button = e.path[0];
                this.moveSlider(button);
            }
            this.topnavMenuClickEventHandler.emit(menuItem);
            // if it's a link, then execute the link behavior
            if (href) {
                switch (target) {
                    case null:
                        window.location.href = href;
                        break;
                    case '_self':
                        window.location.href = href;
                        break;
                    case '_blank':
                        window.open(href);
                        break;
                    case '_top':
                        window.top.location.href = href;
                        break;
                    case '_parent':
                        window.parent.location.href = href;
                        break;
                    default:
                        const frames = window.frames;
                        for (let i = 0; i < frames.length; i++) {
                            const frame = frames[i];
                            if (frame.name === target) {
                                frame.location.href = href;
                                break;
                            }
                        }
                }
            }
        };
        this.handleClickSub = event => {
            const popover = event.target;
            this.moveSlider(popover);
            event.target.toggle();
        };
        this.setWindowWidth = (0,_helpers_bb43a8d9_js__WEBPACK_IMPORTED_MODULE_2__.d)(function () {
            this.windowWidth = window.innerWidth;
        }.bind(this));
        this.topnavMenuClickEventHandler = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcTopnavMenuClick", 7);
        this.notCollapsableEvent = (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cwcNotCollapsable", 7);
    }
    /**
     * Listens to expand/collapse menu
     */
    handleSidenavToggle() {
        this.open = !this.open;
    }
    moveSlider(activeEl) {
        // move the slider
        if (activeEl && this.slider) {
            this.slider.style.left = activeEl.offsetLeft + 'px';
            this.slider.style.width = activeEl.offsetWidth + 'px';
        }
    }
    renderMenu(menuItems = [], isChild = false) {
        // responsive mode
        const renderSidenavItems = items => {
            return items.map((item) => {
                !item.href && (item.href = null);
                !item.target && (item.target = null);
                !item.clickFn &&
                    (item.clickFn = () => {
                        return false;
                    });
                return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-sidenav-menu-item", { label: item.label,
                    // href={item.href}
                    // target={item.target}
                    onCwcClick: e => {
                        this.handleMenuClick(e, item, isChild);
                    }, variant: this.variant }, item.children && item.children.length > 0 && renderSidenavItems(item.children)));
            });
        };
        // desktop mode
        if (!this.collapsable || this.windowWidth > breakpointAsMin) {
            return menuItems.map((menuItem) => {
                if (menuItem.children && menuItem.children.length > 0) {
                    return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-popover", { variant: "menu", onCwcClickWithin: this.handleClickSub }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `cwc-topnav-menu__item ${menuItem.active ? 'active' : ''} ${isChild ? 'list' : ''} ${this.collapsable ? 'collapsable' : 'not-collapsable'}`, slot: "target", onClick: () => {
                            menuItem.clickFn && menuItem.clickFn();
                        } }, menuItem.label, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cwc-topnav-menu__chevron cmx-icon-arrow-down-single" })), (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content" }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderMenu(menuItem.children, true)))));
                }
                return isChild ? ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-menu-item", { active: menuItem.active, onCwcClick: e => {
                        this.handleMenuClick(e, menuItem, false);
                    } }, menuItem.label)) : ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `cwc-topnav-menu__item ${menuItem.active ? 'active' : ''} ${isChild ? 'list' : ''}`, onClick: e => {
                        this.handleMenuClick(e, menuItem, false);
                    } }, menuItem.label));
            });
        }
        else {
            return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cwc-topnav-menu__sidenav" }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-sidenav", { "footer-slot": "false", variant: this.variant }, (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("cwc-sidenav-menu", { slot: "menu-items", variant: this.variant }, renderSidenavItems(menuItems)))));
        }
    }
    renderSlider() {
        let someActive = false;
        this.menu.forEach(item => {
            if (item.active) {
                someActive = true;
            }
        });
        return someActive;
    }
    componentWillLoad() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
        this.setWindowWidth();
    }
    componentDidLoad() {
        window.addEventListener('resize', this.setWindowWidth.bind(this));
    }
    componentDidRender() {
        if (this.windowWidth > breakpointAsMin) {
            const activeElement = this.host.shadowRoot.querySelector('.cwc-topnav-menu__item.active');
            this.moveSlider(activeElement);
        }
        if (!this.collapsable) {
            this.notCollapsableEvent.emit();
        }
    }
    disconnectedCallback() {
        (0,_commonComponentFeatures_b771e888_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
        window.removeEventListener('resize', this.setWindowWidth);
    }
    render() {
        // return the menu
        return ((0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)(_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: `cwc-topnav-menu ${this.designVersion} ${this.variant && 'cwc-topnav-menu--' + this.variant} ${this
                .open && 'open'} ${this.collapsable ? 'collapsable' : 'not-collapsable'}`, "tab-index": "-1", role: "navigation", "aria-label": this.ariaLabelNav }, this.renderMenu(this.menu), this.renderSlider() ? (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cwc-topnav-menu__slider", ref: el => (this.slider = el) }) : null));
    }
    get host() { return (0,_core_cf426fab_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get style() { return "\@charset \"UTF-8\";*{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-wrap:nowrap;flex-wrap:nowrap;margin:0;overflow-x:auto;padding:0;width:auto;position:relative;height:100%;-ms-flex-align:stretch;align-items:stretch}:host(.v1) .cwc-topnav-menu__slider{background-color:transparent}::slotted(*){display:none}.cwc-topnav-menu__item{color:var(--cwc-topnav-menu-item-text-color,var(--cwc-color-grayscale-white-alpha-eighty,hsla(0,0%,100%,.8)));text-decoration:none;padding:0 1.2rem;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;border:none;background-color:transparent;font-family:inherit;font-weight:inherit;text-transform:uppercase;cursor:pointer;-ms-flex-pack:justify;justify-content:space-between;font-size:.75rem;font-weight:500;height:100%;white-space:nowrap}\@media (hover:hover){.cwc-topnav-menu__item:hover{color:var(--cwc-topnav-menu-item-text-color-hover,var(--cwc-color-grayscale-white,#fff))}}.cwc-topnav-menu__item.active{color:var(--cwc-topnav-menu-item-active-text-color,var(--cwc-color-grayscale-white,#fff));background-color:var(--cwc-topnav-menu-item-active-bg-color,var(--cwc-color-ui-primary-darkest-alpha-eighty,rgba(0,27,58,.8)));font-weight:700}.cwc-topnav-menu__slider{display:block;background-color:transparent;height:3px;position:absolute;bottom:0;-webkit-transition:left .25s ease-out;transition:left .25s ease-out}[dir=ltr] .cwc-topnav-menu__chevron{margin-left:.25rem}[dir=rtl] .cwc-topnav-menu__chevron{margin-right:.25rem}.cwc-topnav-menu__chevron{-webkit-margin-start:.25rem;margin-inline-start:.25rem;font-size:.75rem}.cwc-topnav-menu__chevron:before{content:\"\";font-family:dls-icons!important;speak:none;font-style:normal;font-weight:400;font-variant:normal;text-transform:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host(.cwc-topnav-menu--positive) .cwc-topnav-menu__item{color:var(--cwc-topnav-menu-item-positive-text-color,var(--cwc-color-ui-primary-darkest-alpha-eighty,rgba(0,27,58,.8)))}\@media (hover:hover){:host(.cwc-topnav-menu--positive) .cwc-topnav-menu__item:hover{color:var(--cwc-topnav-menu-item-positive-text-color-hover,var(--cwc-color-ui-primary-darkest,#001b3a))}}:host(.cwc-topnav-menu--positive) .cwc-topnav-menu__item.active{color:var(--cwc-topnav-menu-item-positive-text-color-active,var(--cwc-color-ui-primary-darkest,#001b3a));background-color:var(--cwc-topnav-menu-item-positive-bg-color-active,var(--cwc-color-grayscale-black-alpha-ten,rgba(0,0,0,.1)))}\@media (max-width:767px){[dir=ltr] :host(.collapsable){left:0}[dir=rtl] :host(.collapsable){right:0}[dir=ltr] :host(.collapsable){padding-right:5px}[dir=rtl] :host(.collapsable){padding-left:5px}:host(.collapsable){display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;position:fixed;top:54px;inset-inline-start:0;width:220px;height:calc(100vh - 54px);pointer-events:none;-webkit-padding-end:5px;padding-inline-end:5px}:host(.not-collapsable),:host(.v2.not-collapsable){height:54px;-ms-flex-positive:1;flex-grow:1;-ms-flex-pack:justify;justify-content:space-between;padding:0 .5rem}.cwc-topnav-menu__sidenav{margin-top:-54px;height:calc(100% + 54px);width:100%}.cwc-topnav-menu__item{padding:0 .5rem}.cwc-topnav-menu__item.collapsable{display:none}}:host(.v2){background-color:transparent;height:100%}:host(.v2) .cwc-topnav-menu__slider{background-color:var(--cwc-elmt-header-slider-color,var(--cwc-color-brand-secondary,#ee3d42))}:host(.v2) .cwc-topnav-menu__item{font-size:1rem;text-transform:none;font-weight:400}\@media (max-width:767px){:host(.v2) .cwc-topnav-menu__item{font-size:.75rem}}:host(.v2) .cwc-topnav-menu__item.active{background-color:transparent;font-weight:500}:host(.v2.cwc-topnav-menu--positive) .cwc-topnav-menu__item.active{background-color:transparent}"; }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_cmx-web-components_core_dist_esm_cwc-topnav-menu_entry_js.js.map